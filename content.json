[{"title":"docker单机环境下的网络与通信","date":"2018-01-22T02:09:14.000Z","path":"2018/01/22/docker单机环境下的网络与通信/","text":"一、docker单机环境的下的网络1.三种原生网络docker提供三种原生网络，在安装的时候就会自动在host创建三个网络，用 docker network ls 命令查看，分别是：bridge、host、none。在创建容器的时候可以通过--network=none/host/bridge 来指定使用哪一种网络。例如： # docker run -it --network=none busybox none网络：什么都没有的网络，这个网络的容器只有一个lo网卡，是一个网络封闭的容器，对一些安全性较高，不需要联网的应用可以使用none网络。host网络：使用host网络的容器与主机的网络配置完全一样，连hostname都一样。host网络的好处是性能好，但是不够灵活。比如端口与host会冲突.bridge网络：安装docker的时候都会默认创建一个 docker0 的linux bridge，如果不指定网络，默认创建的容器的网络都会挂在 docker0 上。bridge网络的容器有一对veth pair,是一对连起来的网卡，一边在容器里，一边挂在host的docker0 上，这样相当于容器里的一头也挂在 docker0 上。用 docker network inspect bridge 看下bridge网络的配置信息，可以看到bridge网络配置的subnet、网关等信息。 2.自定义网络除了上述三种docker自动创建的网络，用户也可以根据业务需求自定义网络。docker提供三种user-defined网络驱动：bridge、overlay、macvlan。overlay与 macvlan用于创建跨主机网络。通过创建bridge驱动来创建bridge网络，ip网段由docker0自动分配，例如： # docker network create --driver bridge my_net1 也可以通过--subnet 和--gateway 自己指定Ip网段： # docker network create --driver bridge --subnet 172.18.22.0/24 --gateway 172.18.22.1 my_net2 使用自定义的网络也是通过--network 指定，容器中的ip 既可以自动分配也可以在启动容器的时候使用 --ip 指定ip。 # docker run -it --network=my_net2 --ip 172.18.22.8 busybox # docker run -it --network=my_net2 centos 注：只有使用--subnet 创建的网络才能指定静态ip。 二、单机环境下容器之间的通信我们可以想到，挂在同一个bridge上的容器网段和网关都相同，肯定是可以互通的，比如使用上述的my_net2网络的两个容器busybox和centos应该是互通的，事实上也是如此。但是分别使用my_net1和my_net2的两个不同网段的容器能通吗？，答案当然是不行！那么怎么才能让他们互通呢？打开路由转发，加一条路由？这样按理来说应该是可以的，但是事实上加了路由，打开路由转发也不通。这就是docker不同网络的隔离性。docker在iptables上drop了两个网桥之间的双向流向。那么到底怎么样两个不同网段的容器才能通信呢？只有加一块网卡了。在一个容器里加一块另一个网桥的网卡，通过这块网卡与另一个容器通信。 容器之间的三种通信方式1.IP通信如上所说，在创建容器时通过--network 指定相应的网络，或者通过 docker network connect 将现有容器加入指定网络，并且都是同一个网络的网卡，这样两个容器就可以通信了。 2.Docker DNS Serverdocker 自带 DNS服务，使容器可以直接通过“容器名”通信。 # docker run -it --network=my_net2 --name=bbox1 busybox # docker run -it --network=my_net2 --name=bbox2 busybox 在bbox1里pingbbox2 可以通 # ping bbox2 注：使用DNS 只能在 user-defined网络中使用，默认的Bridge不能使用。 3.joined 容器joined容器通过容器之间共享网卡和配置信息，通过127.0.0.1来直接通信。 # docker run -d -it --name=web1 httpd # docker run -it --network=container:web1 busybox 这样两个容器内的网卡mac与ip完全一样，busybox可以直接使用127.0.0.1访问web1的httpd服务。 这种通信方式适合以下场景： 1）.不同容器中的应用程序希望高效快速的通信，比如web server与app server。 2）.希望监控其他容器的网络流量，比如运行在独立容器中的网络监控程序。 三、容器与外网的通信容器与外网的通信其实与其他环境与外网的通信一样的，通过 NAT 访问外网，通过 端口映射 使外网访问容器。 1.容器访问外网主机可以访问外网的情况下，使用默认bridge网络的容器默认也能通外网，关键我们理解下通外网的本职：通过 # iptables -t nat -S 可以看到：当使用docker0 这个网桥的bridge网络的容器，向外Ping的时候，docker0收到容器网段的外出包，把它给masquerade处理，而MASQUERADE将包的源地址转换成host的地址发送出去，即做一次网络地址转发。 2.外网访问容器docker 可将容器对外提供服务的端口映射到 host 的某个端口，外网通过该端口访问容器。容器启动时通过-p参数映射端口： # docker run -d -p 80 httpd 容器启动后，可通过 docker ps 或者 docker port 查看到 host 映射的端口。在上面的例子中，httpd 容器的 80 端口被映射到 host 32773 上，这样就可以通过 : 访问容器的 web 服务了。除了映射动态端口，也可在-p 中指定映射到 host 某个特定端口，例如可将 80 端口映射到 host 的 8080 端口：docker run -d -p 8080:80 httpd","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]},{"title":"docker学习笔记（二）","date":"2018-01-20T07:48:57.000Z","path":"2018/01/20/docker基础（二）/","text":"docker底层最重要的两种技术分别是cgroup和namespace,cgroup实现资源限额，namespace实现资源隔离。cgroup可以设置进程使用cpu、内存和io资源的限额，而namespace使得每个容器都觉得自己在独立的使用主机资源，所以实现了容器间资源的隔离。linux的六种namespace对应六种资源：mount、UTS、IPC、PID、Network和User。 而cgroup对资源限额的使用主要体现在以下方面 1.对内存的限额。与操作系统类似，容器使用的内存包括物理内存和swap两种。 -m 或 –memory 设置内存的使用限额 –memory-swap 设置内存+swap的使用限额 如下：123 # docker run -m 200M --memory-swap=300M centos表示运行centos容器，允许该容器使用内存最多200M，swap最多100M。默认情况这两组参数为-1，即不限额。如果启动容器的时候只指定 -m 而不指定 --memory-swap，那么默认 --memory-swap为-m的两倍， 2.对cpu的限额默认情况，所有容器平等使用host的cpu资源没有限制。-c 或 –cpu-share 可以设置容器使用cpu的权重。不指定的话默认值为1024,也就是说 -c 参数并不能为容器设置cpu的绝对使用资源某个容器最终获取到的cpu资源由它占所有容器使用cpu综合的比例决定，如下：12345启动两个容器： # docker run --name \"container1\" -c 1024 centos # docker run --name \"container2\" -c 512 centos表明 container1容器可以得到2倍的container2容器的cpu资源。这只是在cpu资源紧张的时候，如果container1是关闭状态，container2依然可以使用全部的cpu资源 –cpu 可以设置cpu工作线程的数量，最大为host物理cpu个数。可以使用 progrium/stress 镜像来学习如何为容器分配内存和cpu。该镜像也可用于对容器执行压力测试1# docker run --name container1 -it -c 1024 progrium/stress --cpu 1 3.对block IO的限额Block IO 指的是磁盘的读写，docker 可通过设置权重、限制 bps 和 iops 的方式控制容器读写磁盘的带宽。默认情况下，所有容器能平等地读写磁盘，可以通过设置 –blkio-weight 参数来改变容器 block IO 的优先级。–blkio-weight与 –cpu-shares 类似，设置的是相对权重值，默认为 500。限制 bps 和 iops： bps 是 byte per second，每秒读写的数据量。 iops 是 io per second，每秒 IO 的次数。 可通过以下参数控制容器的 bps 和 iops： –device-read-bps，限制读某个设备的 bps。 –device-write-bps，限制写某个设备的 bps。 –device-read-iops，限制读某个设备的 iops。 –device-write-iops，限制写某个设备的 iops。12# docker run -it--device-write-bps /dev/sda:30MB centos 表明限制容器写 /dev/sda 的速率为 30 MB/s，可以通过dd测试。","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]},{"title":"docker学习笔记(一)","date":"2018-01-19T07:41:42.000Z","path":"2018/01/19/docker基础(一)/","text":"最近几个月乱七八糟的学习了很多docker的东西，零散繁杂，不经常用就会遗忘很多。加之，pass层的火热，kubernetes在容器编排方面看似已经无人能敌了，所以整理以下，作为技术储备，哈哈。 安装docker-ce安装基础包12# yum install epel-release -y# yum install axel vim git curl wget lrzsz gcc python-devel yum* python-pip 设置docker官方repo，安装docker CE版本1# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 系统默认应该没有yum-config-manager,如果没有那就安装它 : yum -y install yum-utils12# yum install -y docker-ce # docker --version 配置docker12345# mkdir /etc/systemd/system/docker.service.d# tee /etc/systemd/system/docker.service.d/docker.conf &lt;&lt; 'EOF'[Service]MountFlags=sharedEOF 编辑 /usr/lib/systemd/system/docker.service12# ExecStart=/usr/bin/dockerdExecStart=/usr/bin/dockerd --insecure-registry 192.168.19.133:4000 启动docker1234# systemctl daemon-reload# systemctl restart docker# systemctl enable docker# docker info 搭建私有仓库12# docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 \\--restart=always --name registry registry:2 docker容器的几点特别的地方我们都知道docker容器是轻量级的，那么体现在哪些地方呢？1.docker容器与host共用kernel,也就是说docker容器里是没有kernel空间的，只有rootfs，也就是我们常见的/dev、/usr、/bin这类东西，所以容器里是不能升级kernel的。2.镜像的分层结构。绝大部分的docker镜像都是从base镜像中配置安装所需软件而来的，每配置安装一个软件，就在现有的镜像基础上增加一层，新镜像就是从base镜像一层一层叠加而来,而且每一层都是共享的，这样内存中只需存一份base镜像就可以了。当用某个镜像启动一个容器的时候，就会在镜像层之上生成一个容器层，所有对容器的操作都是在容器层，而不会对镜像层有任何改变。所以，镜像可以被多个容器共享。 容器的一些常用操作运行容器1234# docker run -it 镜像 /bin/bash 以交互模式启动并进入一个容器 参数： -d 以后台方式启动容器 --name 给启动的容器命名 进入容器的两种方法12# docker attach 长id# docker exec -it 容器名/长id/短id bash attach 与 exec 主要区别如下: 1.attach 直接进入容器 启动命令 的终端，不会启动新的进程。 2.exec 则是在容器中打开新的终端，并且可以启动新的进程。 如果想直接在终端中查看启动命令的输出，用 attach；其他情况使用 exec。当然，如果只是为了查看启动命令的输出，可以用 docker logs 命令 容器的常用操作123# docker stop/start/restart 容器 # docker pause/unpause 容器 # docker rm 容器","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]},{"title":"kolla部署openstack的pika版","date":"2018-01-18T08:44:28.000Z","path":"2018/01/18/kolla部署openstack的pika版/","text":"用kolla部署openstack真的是超级方便简单，想当年初识openstack的时候我可是用了两周多的时间才搭建起一套没有HA的环境，可今天下午，如果不算下载docker镜像的时间，我只用不到两小时的时间就部署起一套openstack+ceph的高可用融合型环境。kolla本身将openstack包括ceph的所用服务都容器化，所有你要启动某个服务，只需要重启该服务的容器就好了。而且kolla是唯一一个没有任何厂商背景的部署工具，完全开源，已经非常成熟了，我所在公司九州云，已经部署了n多的生产案例了，扩容按理来说应该也是比较方便的。贴上同事整理的部署文档，你只需要仔细一点，按照此方法应该都是可以部署成功的，所以就不多说了。https://www.lijiawang.org/posts/kolla-pike-on-centos.html 关于网络123456789kolla定义网络是在/etc/kolla/global.yml文件中,只需在相关网络的后面写上实际的物理网卡名字就可以了，如下：network_interface: \"eno16777736\" 管理网api_interface: \"&#123;&#123; network_interface &#125;&#125;\"storage_interface: \"&#123;&#123; network_interface &#125;&#125;\" 存储网cluster_interface: \"&#123;&#123; network_interface &#125;&#125;\" 存储集群网tunnel_interface: \"&#123;&#123; network_interface &#125;&#125;\" dns_interface: \"&#123;&#123; network_interface &#125;&#125;\" vxlan网neutron_external_interface: \"eno33554960\" private网网络可以分离，也可以用同一块，但是最少应该两块网卡，因为private网络需要独立。如果你做了网卡绑定的话，就换成bond0或bond1等 关于节点信息12345678910关于节点的定义信息是在multinode文件中，在此文件中你可以用hostname来定义哪些物理机是control,哪些是compute，哪些是storage，哪些是network等等，你可以定义openstack的服务安装在哪些节点上。如下：[control]control01control02control03表示control01、control02、control03是控制节点，control01、control02、control03是三个节点的hostname。[keystone:children]control表示keystone服务安装在所有的control节点 关于要安装哪些组件1234567891011121314这个功能也在global.yml文件中定义，如下：enable_barbican: \"no\"enable_ceilometer: \"yes\"enable_central_logging: \"yes\"enable_ceph: \"yes\"enable_ceph_rgw: \"yes\"enable_chrony: \"yes\"enable_cinder: \"yes\"enable_cinder_backend_hnas_iscsi: \"no\"enable_cinder_backend_hnas_nfs: \"no\"enable_cinder_backend_iscsi: \"no\"enable_cinder_backend_lvm: \"no\"enable_cinder_backend_nfs: \"no\"如果你想安装哪个组件，只需要将该组件行的注释去掉，冒号里写yes即可 当这些都定义完就可以deploy了，你可以在deploy之前先prechecks下，防止一些语法错误。再多说一点，1234567在你已经部署完成的情况下，如果要更改global.yml文件，改完以后执行以下命令：kolla-ansible upgrade -i multinodekolla-ansible post-deploy -i multinode如果修改了/etc/config/[server]/[server].conf文件：kolla-ansible reconfigure -i multinode如果部署失败，可以清除然后重新部署，清除的命令是：kolla-ansible destroy -i multinode --yes-i-really-really-mean-it","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"openstack","slug":"openstack","permalink":"http://yoursite.com/tags/openstack/"}]},{"title":"Linux字符管理命令","date":"2018-01-09T04:23:18.000Z","path":"2018/01/09/Linux字符管理命令/","text":"平时工作中经常用到grep、awk、sort、sed等字符管理命令，但是自己记性又不好，每次需要去google，索性总结一下，方便以后查询。 cut 截取所需字符-d “n”:定义分界符,即点位-f n:取第几位的字符1234例如：以空格符为分界符,进行第2位截取 cut -d \" \" -f 2 /etc/fstab 以冒号为分界符，进行第1，3位截取 cut -d \":\" -f 1,3 /etc/passwd sed 通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作1.关于替换： 1).sed替换的基本语法为: sed ‘s/原字符串/替换字符串/‘ filename s 表示替换 特殊字符需要使用反斜线“\\”进行转义，单引号是不能用反斜线转义，要用反斜线的话使用双引号。 要处理的字符串包含单引号也用双引号。 注意：在末尾加g替换每一个匹配的关键字，否则只替换每一行的第一个字符串12替换所有匹配关键字 sed 's/原字符串/替换字符串/g' filename 2）三根斜线也可换成别的符号，只要紧跟s定义即可12将分隔符换成问号”?”: sed 's?原字符串?替换字符串?' 注意：sed处理过的输出是直接输出到屏幕上的,使用参数”i”直接在文件中替换 3）多个替换可以在同一条命令中执行,用分号”;”分隔，其格式为:12同时执行两个替换规则 sed 's/^/添加的头部&amp;/g；s/$/&amp;添加的尾部/g' 4）一些特殊字符的使用 ”^”表示行首 ”$”符号如果在引号中表示行尾，但是在引号外却表示末行(最后一行)2.关于删除： 1）d 删除指定行,要在文件内删除，同样加参数i123456删除文件的第1-3行 sed '1,3d' filename 删除文件的第3行到最后一行 sed ‘3,$d’ filename 删除含有指定字段的行 sed '/字符/d' filename 3)多点编辑 使用-e参数12删除第1-3行，替换某字符 sed -e '1,3d' -e 's/原字符/替换的字符/' filename 4)文件操作1234将含有某字段的行写入新的文件中 sed -n '/某字段/w 新文件' filename 将小写改为大写 sed 'y/小写字母/大写字母/' filename awk 通过正则表达式,得到需要的行,列信息123456 查看df -h命令的第2列 df -h | awk '&#123;print $2&#125;' 查看df -h命令的第2,5列 df -h | awk '&#123;print $2,$5&#125;' 列示月份及年份(\\n为换行符) date | awk '&#123;print \"Year:\" $6 \"\\nMonth:\" $2&#125;' sort 默认以排序ASCII方式进行排序[a-z] 参数: -u 去除重复的行 -r 降序排序[z-a] -n 数值排序,默认情况10比2小,主要因为sort判断第一字符的值 -k 以文本的列进行判断 -t 设定分界符123456 对/etc/passwd文件进行升序排序 sort /etc/passwd 对/etc/passwd文件进行降序排序 sort -r /etc/passwd 对/etc/passwd第3列进行数值排序,分界符为: sort -n -k 3 -t : /etc/passwd wc 统计行数、字数、字符数、文件总统计数 参数: -l 统计行数 -c 统计字节数 -w 统计字数(单词数 uniq 检查文本中重复出现的行 -c 显示输出,并在文本行前加出现的次数,但如果 重复行不连续，则不认为是重复的行 -d 只显示重复的行 -u 只显示不重复的行 -f n前N个字段和每个字段前的空白行一起被忽略,字段从0开始编号 -s n 前N个字符被忽略,字符从0开始编号 -w n 对N个字符以后的字符不在检查重复性 tee 读取标准输入的数据，并将其内容输出成文件 说明:指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件 参数: -a:附加到既有文件的后面，而非覆盖它． -i:忽略中断信号。12 查询当前账户并写入who.txt文件中who | tee who.txt","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/技术/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]}]
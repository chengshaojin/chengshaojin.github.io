<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaojin&#39;s Words</title>
  
  <subtitle>如果有一天有人问你，你觉得我这个人怎么样，你能略加思考的说他是一个有趣的人，那么我就会很开心!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-13T12:48:43.335Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>程少进</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux字符管理命令</title>
    <link href="http://yoursite.com/2018/01/09/Linux%E5%AD%97%E7%AC%A6%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/01/09/Linux字符管理命令/</id>
    <published>2018-01-09T04:23:18.000Z</published>
    <updated>2018-01-13T12:48:43.335Z</updated>
    
    <content type="html"><![CDATA[<p>平时工作中经常用到grep、awk、sort、sed等字符管理命令，但是自己记性又不好，每次需要去google，索性总结一下，方便以后查询。</p><h2 id="cut-截取所需字符"><a href="#cut-截取所需字符" class="headerlink" title="cut 截取所需字符"></a>cut 截取所需字符</h2><p>-d “n”:定义分界符,即点位<br>-f n:取第几位的字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如：以空格符为分界符,进行第2位截取 </span><br><span class="line">　　　cut -d <span class="string">" "</span> -f 2 /etc/fstab</span><br><span class="line">　　　　以冒号为分界符，进行第1，3位截取</span><br><span class="line">　　　cut -d <span class="string">":"</span> -f 1,3 /etc/passwd</span><br></pre></td></tr></table></figure></p><h2 id="sed-通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作"><a href="#sed-通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作" class="headerlink" title="sed 通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作"></a>sed 通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作</h2><p>1.关于替换：<br>　　1).sed替换的基本语法为: sed ‘s/原字符串/替换字符串/‘ filename<br>　　s 表示替换 特殊字符需要使用反斜线“\”进行转义，单引号是不能用反斜线转义，要用反斜线的话使用双引号。<br>　　要处理的字符串包含单引号也用双引号。<br>　　注意：在末尾加g替换每一个匹配的关键字，否则只替换每一行的第一个字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">替换所有匹配关键字</span><br><span class="line">　　　sed <span class="string">'s/原字符串/替换字符串/g'</span> filename</span><br></pre></td></tr></table></figure></p><p>　　2）三根斜线也可换成别的符号，只要紧跟s定义即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将分隔符换成问号”?”:</span><br><span class="line">　　　　sed <span class="string">'s?原字符串?替换字符串?'</span></span><br></pre></td></tr></table></figure></p><p>　　注意：sed处理过的输出是直接输出到屏幕上的,使用参数”i”直接在文件中替换<br>　　3）多个替换可以在同一条命令中执行,用分号”;”分隔，其格式为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同时执行两个替换规则</span><br><span class="line">　　　　　sed <span class="string">'s/^/添加的头部&amp;/g；s/$/&amp;添加的尾部/g'</span></span><br></pre></td></tr></table></figure></p><p>　　4）一些特殊字符的使用<br>　　　　”^”表示行首<br>　　 ”$”符号如果在引号中表示行尾，但是在引号外却表示末行(最后一行)<br>2.关于删除：<br>　　1）d 删除指定行,要在文件内删除，同样加参数i<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除文件的第1-3行 </span><br><span class="line">　　　　sed <span class="string">'1,3d'</span> filename</span><br><span class="line">　　删除文件的第3行到最后一行</span><br><span class="line">　　　　sed ‘3,<span class="variable">$d</span>’ filename</span><br><span class="line">　　删除含有指定字段的行</span><br><span class="line">　　　　sed <span class="string">'/字符/d'</span> filename</span><br></pre></td></tr></table></figure></p><p>   3)多点编辑<br>　　使用-e参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除第1-3行，替换某字符</span><br><span class="line">　　　　sed -e <span class="string">'1,3d'</span> -e <span class="string">'s/原字符/替换的字符/'</span> filename</span><br></pre></td></tr></table></figure></p><p>4)文件操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将含有某字段的行写入新的文件中</span><br><span class="line">　　sed -n <span class="string">'/某字段/w 新文件'</span> filename</span><br><span class="line">　　将小写改为大写</span><br><span class="line">　　sed <span class="string">'y/小写字母/大写字母/'</span> filename</span><br></pre></td></tr></table></figure></p><h2 id="awk-通过正则表达式-得到需要的行-列信息"><a href="#awk-通过正则表达式-得到需要的行-列信息" class="headerlink" title="awk 通过正则表达式,得到需要的行,列信息"></a>awk 通过正则表达式,得到需要的行,列信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　查看df -h命令的第2列</span><br><span class="line">　　　　df -h | awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line">　　查看df -h命令的第2,5列</span><br><span class="line">　　　　df -h | awk <span class="string">'&#123;print $2,$5&#125;'</span></span><br><span class="line">　　列示月份及年份(\n为换行符)</span><br><span class="line">　　　　date | awk <span class="string">'&#123;print "Year:" $6 "\nMonth:" $2&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="sort-默认以排序ASCII方式进行排序-a-z"><a href="#sort-默认以排序ASCII方式进行排序-a-z" class="headerlink" title="sort 默认以排序ASCII方式进行排序[a-z]"></a>sort 默认以排序ASCII方式进行排序[a-z]</h2><p>　　参数:<br>　　-u 去除重复的行<br>　　-r 降序排序[z-a]<br>　　-n 数值排序,默认情况10比2小,主要因为sort判断第一字符的值<br>　　-k 以文本的列进行判断<br>　　-t 设定分界符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　 对/etc/passwd文件进行升序排序</span><br><span class="line">　　　　sort /etc/passwd</span><br><span class="line">　　对/etc/passwd文件进行降序排序</span><br><span class="line">　　　　sort -r /etc/passwd</span><br><span class="line">　　对/etc/passwd第3列进行数值排序,分界符为:</span><br><span class="line">　　　　sort -n -k 3 -t : /etc/passwd</span><br></pre></td></tr></table></figure></p><h2 id="wc-统计行数、字数、字符数、文件总统计数"><a href="#wc-统计行数、字数、字符数、文件总统计数" class="headerlink" title="wc 统计行数、字数、字符数、文件总统计数"></a>wc 统计行数、字数、字符数、文件总统计数</h2><p>　　参数:<br>　　-l 统计行数<br>　　-c 统计字节数<br>　　-w 统计字数(单词数<br>　　uniq 检查文本中重复出现的行<br>　　-c 显示输出,并在文本行前加出现的次数,但如果<br>　　重复行不连续，则不认为是重复的行<br>　　-d 只显示重复的行<br>　　-u 只显示不重复的行<br>　　-f n前N个字段和每个字段前的空白行一起被忽略,字段从0开始编号<br>　　-s n 前N个字符被忽略,字符从0开始编号<br>　　-w n 对N个字符以后的字符不在检查重复性</p><h2 id="tee-读取标准输入的数据，并将其内容输出成文件"><a href="#tee-读取标准输入的数据，并将其内容输出成文件" class="headerlink" title="tee 读取标准输入的数据，并将其内容输出成文件"></a>tee 读取标准输入的数据，并将其内容输出成文件</h2><p>　　说明:指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件<br>　　参数:<br>　　-a:附加到既有文件的后面，而非覆盖它．<br>　　-i:忽略中断信号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　 查询当前账户并写入who.txt文件中</span><br><span class="line">who | tee who.txt</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平时工作中经常用到grep、awk、sort、sed等字符管理命令，但是自己记性又不好，每次需要去google，索性总结一下，方便以后查询。&lt;/p&gt;
&lt;h2 id=&quot;cut-截取所需字符&quot;&gt;&lt;a href=&quot;#cut-截取所需字符&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaojin&#39;s Words</title>
  
  <subtitle>不忘初心，光明前行。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.chengshaojin.com/"/>
  <updated>2018-06-30T10:57:57.381Z</updated>
  <id>http://www.chengshaojin.com/</id>
  
  <author>
    <name>程少进</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018年俄罗斯世界杯</title>
    <link href="http://www.chengshaojin.com/2018/06/13/2018%E5%B9%B4%E4%BF%84%E7%BD%97%E6%96%AF%E4%B8%96%E7%95%8C%E6%9D%AF/"/>
    <id>http://www.chengshaojin.com/2018/06/13/2018年俄罗斯世界杯/</id>
    <published>2018-06-13T13:59:22.000Z</published>
    <updated>2018-06-30T10:57:57.381Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;明晚就是2018年俄罗斯世界杯开幕式了，时间真的是手中的沙，悄悄的无时无刻的在溜走，我还能清楚的记得四年前跟球队队友在酒吧里看巴西世界杯的情形：揭幕战是东道主巴西对克罗地亚，马塞洛奉献了当年世界杯的第一粒进球，而且是踢进了自家大门，中场结束的时候是1：1，因为喝太多啤酒，加上凌晨4点多的球赛我在中场结束便睡倒在沙发上。一觉醒来的结果是巴西逆转3-1克罗地亚，巴西头号球星内马尔梅开二度，似乎当年巴西捧杯是很有希望的样子，谁也想不到在半决赛5星巴西被德国以7-1的成绩横扫。我也清楚的记得那年我们校队的成绩也是非常的不堪，大家还相约一定要好好训练，来年大学生足球联赛一定要复仇。这些上届世界杯的事情还历历在目，转眼就又是一年新的世界杯。</p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>这是四年前在昏暗的酒吧用渣渣像素的手机拍的队友，醉眼迷离的样子，哈哈。<br><img src="http://p86lc3df1.bkt.clouddn.com/%E4%B8%96%E7%95%8C%E6%9D%AF2.jpg" alt=""><br>&emsp;&emsp;白岩松说：俄罗斯世界杯，中国除了足球队没去，基本上其他都去了。有数据说，中国球迷买的世界杯门票在所有国家中排名第九，17个赞助商中有5家中国企业，世界杯吉祥物全都由中国制造，什么看台电梯啊，小龙虾啊之类的都去了俄罗斯。听说本次世界杯，只要你手里有世界杯门票就可以免签证，这个对球迷来说倒是方便了不少。<br>&emsp;&emsp;有人总是预测世界杯的冠军，今年表面实力最强的就是法国，德国，巴西，西班牙这四支队伍了，但是每年世界杯总有惊奇与失望，西班牙卫冕冠军上届照样踢不出小组赛，意大利荷兰今年连俄罗斯都没去成，全国人口30多万人的冰岛队也能进决赛圈。所以，我觉得世界杯球队跟联赛球队不一样，实力是一部分，还有很大一部分要看球队的士气、团结度、荣誉感、运气等等，所以拥有一位球队领袖并且是一位超级球星的阿根廷队不容小觑。还有比利时也是我非常看好的一支球队，而且很多事情是赢到最后的都不是最初实力最强的。<br>&emsp;&emsp;除了几大热门球队，本次世界杯还有一下看点,大家应该去关注：<br>&emsp;&emsp;1.冰岛和巴拿马都是首次杀入世界杯，并且冰岛也是世界杯历史上人口最少的参赛国，全国居民仅有33.4万人，期待他们的表现。<br>&emsp;&emsp;2.以前的世界杯冠军都是欧洲或者南美洲的球队。希望亚洲和非洲球队能突破重围，有好的表现。<br>&emsp;&emsp;3.2014年卫冕冠军西班牙与2010年卫冕冠军意大利以及06年的法国都没能踢出小组赛，看看德国是否能打破魔咒，或者一举再夺大力神杯。<br>&emsp;&emsp;4.现役球员中，托马斯·穆勒的世界杯进球是最多的，共有10球，相比于世界杯史上进球最多的克洛泽，他还差6球（16球）。<br>&emsp;&emsp;5.巴西能否为上届家门口的七剑之仇复仇？那场球赛对巴西人来说就是一场噩梦。<br>&emsp;&emsp;6.比利时可能会是本次世界杯的黑马，而且他们的进球绝大部分都是在下半场。<br>&emsp;&emsp;7.东道主俄罗斯从未出过小组线，看看这次在家门口是否能出线。<br>&emsp;&emsp;8.会有哪些新的球星闪耀，很值得我们期待。<br>&emsp;&emsp;9.（妹子福利）本次世界杯最值得看的肉体：罗伊斯（德国）、迪巴拉（阿根廷“陈冠希”）、格里兹曼（法国）、哈梅斯·罗德里格斯（哥伦比亚）、杰拉德·皮克（西班牙）、凯文·特拉普（德国）等。照片自行百度。<br>最后还是期待中国队第二次进入世界杯决赛圈。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—-2018/6/13</p><hr><p>&emsp;&emsp;世界杯的小组赛踢完了，德国还是倒在了小组赛里，世界杯卫冕冠军踢不出小组赛的魔咒依然存在。只要德国1-0战胜韩国就能出线，可惜韩国并没有给德国机会，反而被韩国抓住机会进了两个球，锁定了韩国的胜局。看台上的克洛泽看着这场糟糕的比赛，很多还是上届世界杯他的队友，眼里全是落寞与失望。与其说韩国防守的顽强，不如说德国将场上优势转化为进球的效率太低，很早大家都能看出来的问题，可是就是没有办法解决。有人在六个月前就预测了F组的出线形势，不得不说这位看的还是比较透。<br><a href="">https://www.zhihu.com/question/263456403/answer/269355419</a></p><p>还是很喜欢德国这支球队的，他们底蕴深厚，人才储备丰富，相信他们能很快调整走出低谷，这才是强队与弱队之间的区别。可是对于本次世界杯的一些球员来说，本次世界杯可能就是他们最后一届世界杯了，时间是不会等待他们的，我们常常说的还有下次却是最好的机会，可是对于很多球员来说我们可能再也不会在世界杯的赛场上看见他们了。</p><p>&emsp;&emsp;小组赛期间让人开心的就是大学球队的聚会了，毕业两年回到大学四年踢球的那片操场，真是让人怀念的地方，操场旁边的小卖部也还在，负责经营的张老师的儿子也已经长大了，也开始在操场追着足球跑了。聚会的那天晚上是阿根廷和冰岛的比赛，最后结果大家也知道了，梅西罚失点球，冰岛逼平了阿根廷，一瞬间很多人都开始怪罪于梅西。后来阿根廷0-3克罗地亚，好在有惊无险的战胜了尼日利亚顺利出线，梅西也用进球有力的反击那些质疑的人。</p><p>&emsp;&emsp;小组赛的结果还是比较正常的，毕竟小组赛是踢三场按积分算，实力比较强的队都出线了，当然除了令人遗憾的德国。巴西、法国在小组赛第一场发挥的都不是特别好，但后两场都渐入佳境，两牙也是携手出线，比利时英格兰小组赛顺风顺水，东道主俄罗斯不负期望以头名出线，乌拉圭克罗地亚毫无悬念出线，F组的墨西哥和瑞典最后才在韩国的帮助下淘汰掉德国携手出线。值得一说的是亚洲和非洲的球队在这次世界杯上的表现比往届都要好很多，继续期待他们的表现。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;—-2018/6/29</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;明晚就是2018年俄罗斯世界杯开幕式了，时间真的是手中的沙，悄悄的无时无刻的在溜走，我还能清楚的记得四年前跟球队队友在酒吧里看巴西世界杯的情形：揭幕战是东道主巴西对克罗地亚，马塞洛奉献了当年世界杯的第一粒进球，而且是踢进了自家大门，中场结束的时候是1
      
    
    </summary>
    
      <category term="生活" scheme="http://www.chengshaojin.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="世界杯" scheme="http://www.chengshaojin.com/tags/%E4%B8%96%E7%95%8C%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>读苏轼与杂谈</title>
    <link href="http://www.chengshaojin.com/2018/05/27/%E8%AF%BB%E8%8B%8F%E8%BD%BC%E4%B8%8E%E6%9D%82%E8%B0%88/"/>
    <id>http://www.chengshaojin.com/2018/05/27/读苏轼与杂谈/</id>
    <published>2018-05-27T10:07:55.000Z</published>
    <updated>2018-06-13T16:24:24.811Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;感觉苏东坡要火，这位接近一千年前的大文豪，不仅影响着当初的时政与生活，而且在之后的一千年，他的诗词，他对生活的乐观态度，依然被很多的人推崇。就是历史上有这样一种人，不管他是身居高位还是穷困潦倒，在他们的内心里总是感到满足和富有，这种内心的满足是那种宠辱不惊，是那种豪放不羁，是那种遗世独立，不管在政治和生活上怎么压迫他，在别人看来仿佛他都会过的很好，让人只能望其项背，无法企及。其实事实也是如此。苏东坡就是这样的一种人。</p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>&emsp;&emsp;一0八0年的旧年除夕，因为乌台诗案而被捕的苏轼，在狱中度过四个月又二十天后被释出狱。这天他走出监狱大门，闻到外面清新自由的空气，微风吹在脸颊上，他看见行人骑马走在街上。回到家，他便做了诗，他说：”却对酒杯浑似梦，试拈诗笔已如神”,他觉得自己诗如泉涌，又说：”平生文字为吾累，此去声名不厌低。塞上纵归他日马，城东不斗少年鸡”。这位可爱的诗人刚出狱就做这样的诗，如果那些御史仔细检查他的诗，两首诗又能当作他诽谤和对帝王不敬的证据。因为他日马可以理解为塞翁失马，不知是好运还是厄运，但是少年鸡则指贾昌年轻时因斗鸡而受唐天子恩宠，在宫内瞎折腾，可引申为朝廷当政的小人，这不就是诽谤么？他自己做完诗都笑道，”我真是不可救药”。我们可以看出苏轼的心比天大，他天生乐观豁达，我们都从小知道他是北宋著名诗人，词人，但是苏轼的一生并没有把所有精力致力于写作，读完林语堂先生的《苏东坡传》，我们可以知道，他还是一个悲天悯人的道德家、一个新派画家、一个瑜伽术的修炼者、是佛教徒、是士大夫、是法官是书法家、是皇帝秘书是散文作家、还是一个饮酒成癖者。他的乐天与他广泛的兴趣是分不开的，我们可以想一想，如果苏轼除了诗词当官以外，对其他的事物没有多大的好奇心，那么在他被贬的岁月里，除了每天作诗评论当政者的愚昧感叹命运的不公，他还能做些什么呢？他又如何乐观的起来呢？所幸，苏轼是一位拿的起放的下的人。在其政，他最高官居副宰相，但他坚持为官一地，造福一方，徐州防汛，杭州筑堤，儋州授馆，兴修水利，架桥凿井，赈灾施药；不在其政，他虽心系百姓，但依然能乐悠悠的过好自己的生活，他自己酿酒即使不好喝，他自己尝试做各种各样的美食，他明白生命不过是某种东西在躯体里短暂的表现形式但也寻求制造长生不老之药，他于生活是开创者是布道者。<br>&emsp;&emsp;我们看看苏轼在生命的最后几年的历程：<br>&emsp;&emsp;一0九三年  妻子逝世；太后逝世，调定州太守。<br>&emsp;&emsp;一0九四年  贬往惠州后谪居惠州。<br>&emsp;&emsp;一0九七年  贬往海南，谪居海南儋州。<br>&emsp;&emsp;一一0一年  北返，往常州。  七月二十八日逝世。<br>&emsp;&emsp;在这种情况下我们再看看这位诗人做了哪些事呢？<br>&emsp;&emsp;在惠州，他还是发挥他喜爱建设的的天性，他与几位太守县令协商建筑了两座大桥，一个在河上，一个在惠州湖上。还有他把无主野坟的骸骨重建为一大冢合葬，他还在城西修了一座放生池。当时他已经是不发俸禄的，没有任何实权，他只是一个热心公益的国民。在惠州的那段时间，他精研佛道儒三家并结合之。在惠州的第二年，他开始自己在一个小山上盖房子，共有二十间，后来这栋房子人称”朝云堂”，苏轼自己的作品里叫”白鹤居”。他用了两年盖好了房子挖好了井种好了树。他的新居落成两月后他被贬海南了。到了海南他又开始盖房子了，但这次他只盖了三间，取名“槟榔庵”。岛上没有墨他便自己制，还险些把房子烧掉。他空闲无事便去乡野采药，考订药的种类，他找到一种古代医术上有，但从没人找到的一种药，他很得意。他写了各种医学笔记，他发现一种荨麻治风湿的方法，很是管用。除去这些，他在海南完成了《东坡志林》的整理，完成了为《尚书》注解，还完成了他和陶潜诗的一百二十四首中最后的十五首。<br>&emsp;&emsp;在苏轼看来高官与平民百姓的不同只是在于做的不同工作，他的内心里是喜欢做一个无忧的隐士，因为他不止一次的表达过对陶渊明的羡慕与敬仰。像苏轼这样的人，为官乃百姓之福，为民方为为自己。所以他才从来没有叹息过为官的命运多舛，他能快乐无所畏惧的过完一生，他能平静的接受从万人之上跌到平民百姓，或许在他看来这也并非是跌落。内心的安宁平静从来不是来源外界，我们现在追逐房子，标榜成功，仿佛只有这些才能带给我们内心的安全与平静。假如有一天你没了工作没有收入，你会惶恐不知所向么？如果会，那么应该怎么去做？你现在做的工作有没有让你感到快乐？我想很多人的答案都是会惶恐，不知道怎么做，不快乐。苏轼用行动告诉我们，解决这些困惑的方法就是保持一颗对这个世界对万物的好奇心，并去学习去钻研，去拥抱每一种不一样的生活，那么你一定会快乐会洒脱，会不去计较得失，因为你在失去的同时也在得到。<br>&emsp;&emsp;</p><hr><p>&emsp;&emsp;楼下的那家超市突然关门了，昨天还去买了半个西瓜，今天门口就挎着一把大锁了，连同里面的一家面馆一起不再营业了。在看到超市门口一位大妈在便宜处理超市里的一些化妆品，心里还是有一些小小的失落，往后买菜就要走更远一点的路了。不知道别的超市有没有买的旺仔棒棒冰。<br>&emsp;&emsp;我看到一朵花，开在攀爬在生锈的小区围栏上不知名的植物上，周围有很多已经凋零的跟它一样的花朵。它本该开在五月，却在六月里独自绽放，开的格外的鲜艳，像极了你突然转过脸的笑容。<br>&emsp;&emsp;上次买的那双很贵的鞋，才穿了几天，鞋头的线就开了，而且特别容易脏，周末我把它洗了，好像它不像原来的样子了。我们不能说它不值那些钱，可能那双鞋的设计本里就不是让你洗的，穿一两次就已经完成它的任务了，而我并不是能让它那么简单完成任务的人。适合的才是最好的。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; –2018/6/10    0:54</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;感觉苏东坡要火，这位接近一千年前的大文豪，不仅影响着当初的时政与生活，而且在之后的一千年，他的诗词，他对生活的乐观态度，依然被很多的人推崇。就是历史上有这样一种人，不管他是身居高位还是穷困潦倒，在他们的内心里总是感到满足和富有，这种内心的满足是那种宠
      
    
    </summary>
    
      <category term="生活" scheme="http://www.chengshaojin.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="苏轼" scheme="http://www.chengshaojin.com/tags/%E8%8B%8F%E8%BD%BC/"/>
    
  </entry>
  
  <entry>
    <title>zabbix总结</title>
    <link href="http://www.chengshaojin.com/2018/05/17/zabbix%E6%80%BB%E7%BB%93/"/>
    <id>http://www.chengshaojin.com/2018/05/17/zabbix总结/</id>
    <published>2018-05-17T02:54:44.000Z</published>
    <updated>2018-05-17T10:50:59.892Z</updated>
    
    <content type="html"><![CDATA[<p>zabbix应该是一个使用比较广泛的的开源监控软件，它的强大毋庸置疑。我在平时工作中也用到很多zabbix，但也没有系统的去学习总结过，今天就把基础总结一下。</p><h2 id="1-zabbix部分名词解释"><a href="#1-zabbix部分名词解释" class="headerlink" title="1.zabbix部分名词解释"></a>1.zabbix部分名词解释</h2><ul><li>Zabbix Server : zabbix的控制中心，收集数据、写入数据库都是它的工作。</li><li>Zabbix Agent : 部署在被监控服务器上的一个进程，负责个Zabbix Server交互，执行命令。</li><li>Host ： 一般就是物理服务器、刀片机、交换机这些实体。</li><li>item : 某一个被监控的指标，比如监控cpu负载就是一个item。</li><li>Trigger ： 一些逻辑规则的组合，它有三个值：正常、异常、未知。</li><li>Action ： 当trigger符合某个值的时候，zabbix会进行的操作，比如发邮件。</li></ul><h2 id="2-安装zabbix"><a href="#2-安装zabbix" class="headerlink" title="2.安装zabbix"></a>2.安装zabbix</h2><h3 id="2-1-安装zabbix-server"><a href="#2-1-安装zabbix-server" class="headerlink" title="2.1 安装zabbix-server"></a>2.1 安装zabbix-server</h3><p>下面为快速安装脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#clsn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装zabbix源、aliyun YUM源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line">rpm -ivh http://repo.zabbix.com/zabbix/3.0/rhel/7/x86_64/zabbix-release-3.0-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装zabbix </span></span><br><span class="line">yum install -y zabbix-server-mysql zabbix-web-mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装启动 mariadb数据库</span></span><br><span class="line">yum install -y  mariadb-server</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据库</span></span><br><span class="line">mysql -e <span class="string">'create database zabbix character set utf8 collate utf8_bin;'</span></span><br><span class="line">mysql -e <span class="string">'grant all privileges on zabbix.* to zabbix@localhost identified by "zabbix";'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入数据</span></span><br><span class="line">zcat /usr/share/doc/zabbix-server-mysql-3.0.17/create.sql.gz|mysql -uzabbix -pzabbix zabbix</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置zabbixserver连接mysql</span></span><br><span class="line">sed -i.ori <span class="string">'115a DBPassword=zabbix'</span> /etc/zabbix/zabbix_server.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加时区</span></span><br><span class="line">sed -i.ori <span class="string">'18a php_value date.timezone  Asia/Shanghai'</span> /etc/httpd/conf.d/zabbix.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决中文乱码</span></span><br><span class="line">yum -y install wqy-microhei-fonts</span><br><span class="line">\cp /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/share/fonts/dejavu/DejaVuSans.ttf</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl start zabbix-server</span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入开机自启动</span></span><br><span class="line">chmod +x /etc/rc.d/rc.local</span><br><span class="line">cat &gt;&gt;/etc/rc.d/rc.local&lt;&lt;EOF</span><br><span class="line">systemctl start mariadb.service</span><br><span class="line">systemctl start httpd</span><br><span class="line">systemctl start zabbix-server</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出信息</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"浏览器访问 http://`hostname -I|awk '&#123;print <span class="variable">$1</span>&#125;'`/zabbix"</span></span><br></pre></td></tr></table></figure></p><h3 id="2-2-安装zabbix-agent"><a href="#2-2-安装zabbix-agent" class="headerlink" title="2.2 安装zabbix-agent"></a>2.2 安装zabbix-agent</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#clsn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装zabbix源、aliyu nYUM源</span></span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</span><br><span class="line">rpm -ivh http://repo.zabbix.com/zabbix/3.0/rhel/7/x86_64/zabbix-release-3.0-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装zabbix客户端</span></span><br><span class="line">yum install zabbix-agent -y</span><br><span class="line">sed -i.ori <span class="string">'s#Server=127.0.0.1#Server=172.16.1.61#'</span> /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">systemctl start  zabbix-agent.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入开机自启动</span></span><br><span class="line">chmod +x /etc/rc.d/rc.local</span><br><span class="line">cat &gt;&gt;/etc/rc.d/rc.local&lt;&lt;EOF</span><br><span class="line">systemctl start  zabbix-agent.service</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="2-3-检查连通性"><a href="#2-3-检查连通性" class="headerlink" title="2.3 检查连通性"></a>2.3 检查连通性</h3><h4 id="在服务端安装zabbix-get检测工具"><a href="#在服务端安装zabbix-get检测工具" class="headerlink" title="在服务端安装zabbix-get检测工具"></a>在服务端安装zabbix-get检测工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install zabbix-get -y</span></span><br></pre></td></tr></table></figure><h4 id="在服务端测试"><a href="#在服务端测试" class="headerlink" title="在服务端测试"></a>在服务端测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@zabbix-server ~]<span class="comment"># zabbix_get -s 172.18.23.30 -p 10050 -k "system.cpu.load[all,avg1]"</span></span><br><span class="line">0.020000</span><br><span class="line">[root@zabbix-server ~]<span class="comment"># zabbix_get -s 172.18.23.21 -p 10050 -k "system.cpu.load[all,avg1]"</span></span><br><span class="line">0.000000</span><br></pre></td></tr></table></figure><h2 id="3-web界面操作"><a href="#3-web界面操作" class="headerlink" title="3.web界面操作"></a>3.web界面操作</h2><h3 id="3-1-安装zabbix-web"><a href="#3-1-安装zabbix-web" class="headerlink" title="3.1 安装zabbix-web"></a>3.1 安装zabbix-web</h3><p>浏览器访问 <a href="http://172.18.23.30/zabbix/setup.php" target="_blank" rel="noopener">http://172.18.23.30/zabbix/setup.php</a><br><img src="http://p86lc3df1.bkt.clouddn.com/d68bca5bd45c20dcb1322fa9f3c1f99.png" alt=""><br>根据提示，输入数据库密码以及自定义name，依次点击 next step<br>进入登陆界面  账号Admin密码zabbix   注意A大写</p><h3 id="3-2-配置监控一台host及items"><a href="#3-2-配置监控一台host及items" class="headerlink" title="3.2 配置监控一台host及items"></a>3.2 配置监控一台host及items</h3><p>点击 Configuration &gt; Hosts &gt; Create host<br><img src="http://p86lc3df1.bkt.clouddn.com/e0b5dcb2701826d44830789c95407f9.png" alt=""><br>填完这4项后，监控的主机里没有item，我们用现有的模板来增加监控的item。 点击 Templates &gt; Select (Template OS Linux) &gt; Add &gt; Add<br><img src="http://p86lc3df1.bkt.clouddn.com/114e9c1550a86f54e685e697d1993d6.png" alt=""><br>可以看到Hosts里多了一行监控的信息。<br>当然也可以一条一条的增加item。<br>在右上角的搜索栏里搜索一个主机，点击 items &gt; Create item 然后填写相关信息。<br><img src="http://p86lc3df1.bkt.clouddn.com/2b6c3325f3380d94bf7581a1dad38fb.png" alt=""></p><h3 id="3-3-添加Trigger"><a href="#3-3-添加Trigger" class="headerlink" title="3.3 添加Trigger"></a>3.3 添加Trigger</h3><p>Trigger,即触发器，当出现某些情况时，它会发出某些提示行为。在zabbix里可以对一个Trigger定义一些触发的条件，比如某个item的值超过某个阈值，然后定义这个Trigger触发后该干什么。<br>我们来配一个Trigger，当CPU负载超过某个阈值时，会触发这个Trigger。<br>点击 “Configuration &gt; Hosts &gt; Triggers &gt; Create trigger”<br><img src="http://p86lc3df1.bkt.clouddn.com/f2da608812bdf642f79dac225db704f.png" alt=""><br>Expression是服务器CPU负载的item。<br>添加完在Trigger里可以看到刚刚添加的triger<br><img src="http://p86lc3df1.bkt.clouddn.com/321cb9616e1bb7d4ab86830ecb2ec93.png" alt=""></p><h3 id="3-4-设置Action"><a href="#3-4-设置Action" class="headerlink" title="3.4 设置Action"></a>3.4 设置Action</h3><p>首先配置zabbix使用的邮件服务器。点击 “Administration &gt; Media types &gt; Email”<br><img src="http://p86lc3df1.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180517183849.png" alt=""><br>再新建一个Action。 “Configuration &gt; action &gt; Create action”<br>配置Action 、Conditions、Operations。<br>至此，报警动作就已经配置好了。<br>未完，待更。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;zabbix应该是一个使用比较广泛的的开源监控软件，它的强大毋庸置疑。我在平时工作中也用到很多zabbix，但也没有系统的去学习总结过，今天就把基础总结一下。&lt;/p&gt;
&lt;h2 id=&quot;1-zabbix部分名词解释&quot;&gt;&lt;a href=&quot;#1-zabbix部分名词解释&quot; cla
      
    
    </summary>
    
      <category term="技术" scheme="http://www.chengshaojin.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="zabbix" scheme="http://www.chengshaojin.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>crush设计：SSD、SATA盘的混合使用</title>
    <link href="http://www.chengshaojin.com/2018/05/05/crush%E8%AE%BE%E8%AE%A1%EF%BC%9ASSD%E3%80%81SATA%E7%9B%98%E7%9A%84%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.chengshaojin.com/2018/05/05/crush设计：SSD、SATA盘的混合使用/</id>
    <published>2018-05-05T01:13:41.000Z</published>
    <updated>2018-05-05T03:56:50.624Z</updated>
    
    <content type="html"><![CDATA[<p>虽然固态硬盘成本在大幅降低，但相比机械硬盘依然成本较高。那么为了充分使用ssd与sata,就有这样两种场景：一种是在一套ceph里，对IO性能需求比较高的数据用ssd，对IO性能需求较低的使用普通sata盘。比如常见的云环境里，虚拟机启动盘用ssd的存储池，快照备份等用sata的存储池。还有一种场景是在多副本的情况下，把主副本放在ssd的bucket里，其他副本放在sata设备上。这两种场景都可以通过自定义设计crushmap文件来达到。下面我结合openstack，详细说明应用的方法。</p><h2 id="一、设计openstack中cinder-ceph多后端"><a href="#一、设计openstack中cinder-ceph多后端" class="headerlink" title="一、设计openstack中cinder ceph多后端"></a>一、设计openstack中cinder ceph多后端</h2><h3 id="安装openstack-ceph"><a href="#安装openstack-ceph" class="headerlink" title="安装openstack+ceph"></a>安装openstack+ceph</h3><p>由于资源有限，我在一台机器上实验。还是使用kolla,搭建一套all-in-one的openstack环境。有两块盘，一块sata /dev/sdb ,一块ssd /dev/sdc 。在global文件里打开ceph。给两块盘打ceph标签。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parted /dev/sdb -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_BOOTSTRAP 1 -1</span><br><span class="line">parted /dev/sdc -s -- mklabel gpt mkpart KOLLA_CEPH_OSD_CACHE_BOOTSTRAP 1 -1</span><br></pre></td></tr></table></figure></p><p>设置副本数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">编辑/etc/kolla/config/ceph.conf文件</span><br><span class="line">[root@queens ~]<span class="comment"># cat /etc/kolla/config/ceph.conf </span></span><br><span class="line">[global]</span><br><span class="line">osd pool default size = 1</span><br><span class="line">osd pool default min size = 1</span><br></pre></td></tr></table></figure></p><p>配置好其他项就可以部署了，具体配置哪些可以看我前面的博客。<br>部署完成以后增加一个cinder后端，然后设计crushmap了。</p><h5 id="编辑-etc-kolla-cinder-volume-cinder-conf"><a href="#编辑-etc-kolla-cinder-volume-cinder-conf" class="headerlink" title="编辑/etc/kolla/cinder-volume/cinder.conf"></a>编辑/etc/kolla/cinder-volume/cinder.conf</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">增加以下配置</span><br><span class="line">[DEFAULT]</span><br><span class="line">enabled_backends = rbd-1,ssd</span><br><span class="line">[ssd]</span><br><span class="line">volume_driver = cinder.volume.drivers.rbd.RBDDriver</span><br><span class="line">volume_backend_name = ssd</span><br><span class="line">rbd_pool = volumes-cache</span><br><span class="line">rbd_ceph_conf = /etc/ceph/ceph.conf</span><br><span class="line">rbd_flatten_volume_from_snapshot = <span class="literal">false</span></span><br><span class="line">rbd_max_clone_depth = 5</span><br><span class="line">rbd_store_chunk_size = 4</span><br><span class="line">rados_connect_timeout = 5</span><br><span class="line">rbd_user = cinder</span><br><span class="line">rbd_secret_uuid = b89a2a40-c009-47da-ba5b-7b6414a1f759  <span class="comment">#通过uuidgen生成</span></span><br><span class="line">report_discard_supported = True</span><br><span class="line">image_upload_use_cinder_backend = True</span><br><span class="line">重启cinder-volume服务</span><br><span class="line"><span class="comment"># docker restart cinder_volume</span></span><br></pre></td></tr></table></figure><h3 id="设计crush"><a href="#设计crush" class="headerlink" title="设计crush"></a>设计crush</h3><h5 id="获取当前的crush-map"><a href="#获取当前的crush-map" class="headerlink" title="获取当前的crush map"></a>获取当前的crush map</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker exec -it ceph_mon bash</span></span><br><span class="line"><span class="comment"># ceph osd getcrushmap -o crushmap.old</span></span><br></pre></td></tr></table></figure><h5 id="反编译crush-map"><a href="#反编译crush-map" class="headerlink" title="反编译crush map"></a>反编译crush map</h5><p>crushmap文件是一个二进制文件，通过crushtool反编译为文本文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crushtool -d crushmap.old -o crushmap.new</span></span><br></pre></td></tr></table></figure></p><h5 id="编辑crush-map-文件"><a href="#编辑crush-map-文件" class="headerlink" title="编辑crush map 文件"></a>编辑crush map 文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi crushmap.new</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># begin crush map</span></span><br><span class="line">tunable choose_local_tries 0</span><br><span class="line">tunable choose_local_fallback_tries 0</span><br><span class="line">tunable choose_total_tries 50</span><br><span class="line">tunable chooseleaf_descend_once 1</span><br><span class="line">tunable chooseleaf_vary_r 1</span><br><span class="line">tunable chooseleaf_stable 1</span><br><span class="line">tunable straw_calc_version 1</span><br><span class="line">tunable allowed_bucket_algs 54</span><br><span class="line"></span><br><span class="line"><span class="comment"># devices</span></span><br><span class="line">device 0 device0</span><br><span class="line">device 1 osd.1 class hdd</span><br><span class="line">device 2 osd.2 class hdd</span><br><span class="line"></span><br><span class="line"><span class="comment"># types</span></span><br><span class="line"><span class="built_in">type</span> 0 osd</span><br><span class="line"><span class="built_in">type</span> 1 host</span><br><span class="line"><span class="built_in">type</span> 2 chassis</span><br><span class="line"><span class="built_in">type</span> 3 rack</span><br><span class="line"><span class="built_in">type</span> 4 row</span><br><span class="line"><span class="built_in">type</span> 5 pdu</span><br><span class="line"><span class="built_in">type</span> 6 pod</span><br><span class="line"><span class="built_in">type</span> 7 room</span><br><span class="line"><span class="built_in">type</span> 8 datacenter</span><br><span class="line"><span class="built_in">type</span> 9 region</span><br><span class="line"><span class="built_in">type</span> 10 root</span><br><span class="line"></span><br><span class="line"><span class="comment"># buckets</span></span><br><span class="line">host queens &#123;         <span class="comment"># sata的host层级</span></span><br><span class="line">        id -1           <span class="comment"># 设置唯一id</span></span><br><span class="line">        id -2 class hdd         <span class="comment"># do not change unnecessarily</span></span><br><span class="line">        <span class="comment"># weight 2.000</span></span><br><span class="line">        alg straw2</span><br><span class="line">        <span class="built_in">hash</span> 0  <span class="comment"># rjenkins1</span></span><br><span class="line">        item osd.1 weight 1.000  <span class="comment">#在主机quees里的sata盘 的osd</span></span><br><span class="line">&#125;</span><br><span class="line">root default &#123;  <span class="comment"># sata的root层级</span></span><br><span class="line">        id -3           <span class="comment"># do not change unnecessarily</span></span><br><span class="line">        id -4 class hdd         <span class="comment"># do not change unnecessarily</span></span><br><span class="line">        <span class="comment"># weight 2.000</span></span><br><span class="line">        alg straw2</span><br><span class="line">        <span class="built_in">hash</span> 0  <span class="comment"># rjenkins1</span></span><br><span class="line">        item queens weight 1.000</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host queens-ssd &#123;       <span class="comment">#新建ssd的host层级</span></span><br><span class="line">        id -5          <span class="comment"># do not change unnecessarily</span></span><br><span class="line">        id -6 class hdd         <span class="comment"># do not change unnecessarily</span></span><br><span class="line">        <span class="comment"># weight 2.000</span></span><br><span class="line">        alg straw2</span><br><span class="line">        <span class="built_in">hash</span> 0  <span class="comment"># rjenkins1</span></span><br><span class="line">        item osd.2 weight 1.000  <span class="comment">#在主机quees里的ssd盘的osd</span></span><br><span class="line">&#125;</span><br><span class="line">root ssd &#123;     <span class="comment">#新建一个root层级 命名为ssd</span></span><br><span class="line">        id -7           <span class="comment"># do not change unnecessarily</span></span><br><span class="line">        id -8 class hdd         <span class="comment"># do not change unnecessarily</span></span><br><span class="line">        <span class="comment"># weight 2.000</span></span><br><span class="line">        alg straw2</span><br><span class="line">        <span class="built_in">hash</span> 0  <span class="comment"># rjenkins1</span></span><br><span class="line">        item queens-ssd weight 1.000</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># rules</span></span><br><span class="line">rule replicated_rule &#123;      </span><br><span class="line">        id 0</span><br><span class="line">        <span class="built_in">type</span> replicated</span><br><span class="line">        min_size 1</span><br><span class="line">        max_size 10</span><br><span class="line">        step take default</span><br><span class="line">        step chooseleaf firstn 0 <span class="built_in">type</span> host</span><br><span class="line">        step emit</span><br><span class="line">&#125;</span><br><span class="line">rule disks &#123;   <span class="comment">#sata rule</span></span><br><span class="line">        id 1</span><br><span class="line">        <span class="built_in">type</span> replicated</span><br><span class="line">        min_size 1</span><br><span class="line">        max_size 10</span><br><span class="line">        step take default</span><br><span class="line">        step chooseleaf firstn 0 <span class="built_in">type</span> host</span><br><span class="line">        step emit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule ssd &#123;  <span class="comment"># 新建ssd rule</span></span><br><span class="line">        id 2</span><br><span class="line">        <span class="built_in">type</span> replicated</span><br><span class="line">        min_size 1</span><br><span class="line">        max_size 10</span><br><span class="line">        step take default</span><br><span class="line">        step chooseleaf firstn 0 <span class="built_in">type</span> host</span><br><span class="line">        step emit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># end crush map</span></span><br></pre></td></tr></table></figure><h5 id="编译crushmap"><a href="#编译crushmap" class="headerlink" title="编译crushmap"></a>编译crushmap</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crushtool -c crushmap.new -o crushmap.bin</span></span><br></pre></td></tr></table></figure><h5 id="把新的crushmap应用到ceph里"><a href="#把新的crushmap应用到ceph里" class="headerlink" title="把新的crushmap应用到ceph里"></a>把新的crushmap应用到ceph里</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceph osd setcrushmap -i crushmap.bin</span><br></pre></td></tr></table></figure><h5 id="查看crush结构，确认新的crushmap生效"><a href="#查看crush结构，确认新的crushmap生效" class="headerlink" title="查看crush结构，确认新的crushmap生效"></a>查看crush结构，确认新的crushmap生效</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(ceph-mon)[root@queens /]<span class="comment"># ceph osd tree</span></span><br><span class="line">ID CLASS WEIGHT  TYPE NAME           STATUS REWEIGHT PRI-AFF </span><br><span class="line">-7       1.00000 root ssd                                    </span><br><span class="line">-5       1.00000     host queens-ssd                         </span><br><span class="line"> 2   ssd 1.00000         osd.2           up  1.00000 1.00000 </span><br><span class="line">-3       1.00000 root default                                </span><br><span class="line">-1       1.00000     host queens</span><br><span class="line"> 1   hdd 1.00000         osd.1           up  1.00000 1.00000</span><br></pre></td></tr></table></figure><h5 id="查看rule"><a href="#查看rule" class="headerlink" title="查看rule"></a>查看rule</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(ceph-mon)[root@queens /]<span class="comment"># ceph osd crush rule ls</span></span><br><span class="line">replicated_rule</span><br><span class="line">disks</span><br><span class="line">ssd</span><br></pre></td></tr></table></figure><h5 id="创建ssd的存储池并指定rule"><a href="#创建ssd的存储池并指定rule" class="headerlink" title="创建ssd的存储池并指定rule"></a>创建ssd的存储池并指定rule</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ceph osd pool create SSD 64 64 ssd</span></span><br></pre></td></tr></table></figure><h5 id="查看rule是否生效"><a href="#查看rule是否生效" class="headerlink" title="查看rule是否生效"></a>查看rule是否生效</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(ceph-mon)[root@queens /]<span class="comment"># ceph osd dump |grep -i pool</span></span><br><span class="line">pool 1 <span class="string">'images'</span> replicated size 1 min_size 1 crush_rule 1 object_hash rjenkins pg_num 128 pgp_num 128 last_change 39 flags hashpspool stripe_width 0 application rbd</span><br><span class="line">pool 2 <span class="string">'volumes'</span> replicated size 1 min_size 1 crush_rule 1 object_hash rjenkins pg_num 128 pgp_num 128 last_change 40 flags hashpspool stripe_width 0 application rbd</span><br><span class="line">pool 3 <span class="string">'backups'</span> replicated size 1 min_size 1 crush_rule 1 object_hash rjenkins pg_num 128 pgp_num 128 last_change 41 flags hashpspool stripe_width 0 application rbd</span><br><span class="line">pool 4 <span class="string">'vms'</span> replicated size 1 min_size 1 crush_rule 1 object_hash rjenkins pg_num 128 pgp_num 128 last_change 42 flags hashpspool stripe_width 0 application rbd</span><br><span class="line">pool 9 <span class="string">'SSD'</span> replicated size 1 min_size 1 crush_rule 2 object_hash rjenkins pg_num 32 pgp_num 32 last_change 56 flags hashpspool stripe_width 0</span><br></pre></td></tr></table></figure><h5 id="创建两个cinder卷类型"><a href="#创建两个cinder卷类型" class="headerlink" title="创建两个cinder卷类型"></a>创建两个cinder卷类型</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cinder type-create SATA</span></span><br><span class="line"><span class="comment"># cinder type-create SSD</span></span><br><span class="line">[root@queens ~]<span class="comment"># cinder type-list</span></span><br><span class="line">/usr/lib/python2.7/site-packages/requests/__init__.py:80: RequestsDependencyWarning: urllib3 (1.22) or chardet (2.2.1) doesn<span class="string">'t match a supported version!</span></span><br><span class="line"><span class="string">  RequestsDependencyWarning)</span></span><br><span class="line"><span class="string">+--------------------------------------+------+-------------+-----------+</span></span><br><span class="line"><span class="string">| ID                                   | Name | Description | Is_Public |</span></span><br><span class="line"><span class="string">+--------------------------------------+------+-------------+-----------+</span></span><br><span class="line"><span class="string">| 483595f4-5882-4b84-8108-3a9df703d1cb | SSD  | -           | True      |</span></span><br><span class="line"><span class="string">| 532ad78f-2205-4b1a-888d-b4670d5f4463 | SATA | -           | True      |</span></span><br><span class="line"><span class="string">+--------------------------------------+------+-------------+-----------+</span></span><br></pre></td></tr></table></figure><h5 id="设置卷类型的key键值"><a href="#设置卷类型的key键值" class="headerlink" title="设置卷类型的key键值"></a>设置卷类型的key键值</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cinder type-key SSD set volume_backend_name=ssd</span></span><br><span class="line"><span class="comment"># cinder type-key SATA set volume_backend_name=rbd-1</span></span><br><span class="line">[root@queens ~]<span class="comment"># cinder  extra-specs-list</span></span><br><span class="line">/usr/lib/python2.7/site-packages/requests/__init__.py:80: RequestsDependencyWarning: urllib3 (1.22) or chardet (2.2.1) doesn<span class="string">'t match a supported version!</span></span><br><span class="line"><span class="string">  RequestsDependencyWarning)</span></span><br><span class="line"><span class="string">+--------------------------------------+------+----------------------------------+</span></span><br><span class="line"><span class="string">| ID                                   | Name | extra_specs                      |</span></span><br><span class="line"><span class="string">+--------------------------------------+------+----------------------------------+</span></span><br><span class="line"><span class="string">| 483595f4-5882-4b84-8108-3a9df703d1cb | SSD  | &#123;'</span>volume_backend_name<span class="string">': '</span>ssd<span class="string">'&#125;   |</span></span><br><span class="line"><span class="string">| 532ad78f-2205-4b1a-888d-b4670d5f4463 | SATA | &#123;'</span>volume_backend_name<span class="string">': '</span>rbd-1<span class="string">'&#125; |</span></span><br><span class="line"><span class="string">+--------------------------------------+------+----------------------------------+</span></span><br></pre></td></tr></table></figure><p>这是创建云硬盘就可以选择sata还是ssd了<br><img src="http://p86lc3df1.bkt.clouddn.com/b0a0cca82de3a63c22f97b85f3d2b40.png" alt=""></p><h2 id="二-主备存储方案"><a href="#二-主备存储方案" class="headerlink" title="二.主备存储方案"></a>二.主备存储方案</h2><p>由于没有硬件资源可以搭建三幅本的ceph，在这里我只说一下具体方法。<br>主备存储方案的crush设计跟上面的一样，只需在rule上做一些修改即可。<br>ceph的读写流程：<br><img src="http://p86lc3df1.bkt.clouddn.com/697113-20150925173957756-1480951725.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">假设我们上面的是三幅本，我们沿用上面的crush,创建新的crush rule。</span><br><span class="line">rule pg &#123;</span><br><span class="line">        id 3</span><br><span class="line">        <span class="built_in">type</span> replicated</span><br><span class="line">        min_size 1</span><br><span class="line">        max_size 10</span><br><span class="line">        step take ssd  <span class="comment">#指定入口bucket为ssd</span></span><br><span class="line">        step chooseleaf firstn 1 <span class="built_in">type</span> host <span class="comment">#从ssd bucket搜索一个合适的osd存储主副本</span></span><br><span class="line">        step emit</span><br><span class="line">        </span><br><span class="line">        step take default  <span class="comment">#指定入口bucket为sata</span></span><br><span class="line">        step chooseleaf firstn -1 <span class="built_in">type</span> host <span class="comment">#从default bucket搜索其他副本所需的osd来存储</span></span><br><span class="line">        step emit</span><br><span class="line">&#125;</span><br><span class="line">编译应用并创建一个名为pg的存储池，指定pg rule,验证pg pool 的PG分布。</span><br><span class="line"></span><br><span class="line"><span class="comment"># ceph pg dump | grep '^3\.' | awk 'BEGIN&#123;print "PG_id","\t","copy_set"&#125;&#123;print $1,"\t",$15&#125;' | less</span></span><br></pre></td></tr></table></figure></p><p>拓展：除了利用crush来实现主备存储，还可以通过osd的亲和性实现主备存储。调整osd的primary affinity的值，只要把sata设备对应的osd的值设置为0 ，这些osd就不会成为主副本，读写都只落到ssd对应的osd上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然固态硬盘成本在大幅降低，但相比机械硬盘依然成本较高。那么为了充分使用ssd与sata,就有这样两种场景：一种是在一套ceph里，对IO性能需求比较高的数据用ssd，对IO性能需求较低的使用普通sata盘。比如常见的云环境里，虚拟机启动盘用ssd的存储池，快照备份等用sa
      
    
    </summary>
    
      <category term="技术" scheme="http://www.chengshaojin.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ceph" scheme="http://www.chengshaojin.com/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>用cobbler安装操作系统</title>
    <link href="http://www.chengshaojin.com/2018/04/18/%E7%94%A8cobbler%E5%AE%89%E8%A3%85%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.chengshaojin.com/2018/04/18/用cobbler安装操作系统/</id>
    <published>2018-04-18T08:17:39.000Z</published>
    <updated>2018-04-18T09:54:03.518Z</updated>
    
    <content type="html"><![CDATA[<p>cobbler是一个linux服务器安装的服务，可以通过pxe、kickstart自动、快速、批量的安装系统，并可以管理dhcp、dns等。<br>cobbler有一套web界面管理工具（cobbler-web），也可以使用命令行管理。</p><h4 id="Cobbler集成的服务有："><a href="#Cobbler集成的服务有：" class="headerlink" title="Cobbler集成的服务有："></a>Cobbler集成的服务有：</h4><ul><li>DHCP服务管理</li><li>DNS服务管理</li><li>电源管理</li><li>Ｋickstart服务</li><li>YUM仓库管理</li><li>TFTP</li><li>httpd服务<h3 id="1-安装cobbler"><a href="#1-安装cobbler" class="headerlink" title="1.安装cobbler"></a>1.安装cobbler</h3><h4 id="1-1-环境信息"><a href="#1-1-环境信息" class="headerlink" title="1.1 环境信息"></a>1.1 环境信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">CentOS Linux release 7.2.1511 (Core) </span><br><span class="line">[root@cobbler ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-327.el7.x86_64</span><br><span class="line">[root@cobbler ~]<span class="comment"># getenforce</span></span><br><span class="line">Disabled</span><br><span class="line">[root@cobbler ~]<span class="comment"># systemctl status firewalld</span></span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br></pre></td></tr></table></figure></li></ul><p>yum源说明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br><span class="line"><span class="comment"># curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span></span><br></pre></td></tr></table></figure></p><h4 id="1-2-yum安装cobbler"><a href="#1-2-yum安装cobbler" class="headerlink" title="1.2 yum安装cobbler"></a>1.2 yum安装cobbler</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum -y install cobbler cobbler-web dhcp tftp-server pykickstart httpd</span></span><br><span class="line"><span class="comment"># systemctl start httpd.service</span></span><br><span class="line"><span class="comment"># systemctl start cobblerd.service</span></span><br><span class="line"><span class="comment"># cobbler check</span></span><br><span class="line">[root@cobbler ~]<span class="comment"># cobbler check</span></span><br><span class="line">The following are potential configuration items that you may want to fix:</span><br><span class="line">1 : The <span class="string">'server'</span> field <span class="keyword">in</span> /etc/cobbler/settings must be <span class="built_in">set</span> to something other than localhost, or kickstarting features will not work.  This should be a resolvable hostname or IP <span class="keyword">for</span> the boot server as reachable by all machines that will use it.</span><br><span class="line">2 : For PXE to be functional, the <span class="string">'next_server'</span> field <span class="keyword">in</span> /etc/cobbler/settings must be <span class="built_in">set</span> to something other than 127.0.0.1, and should match the IP of the boot server on the PXE network.</span><br><span class="line">3 : change <span class="string">'disable'</span> to <span class="string">'no'</span> <span class="keyword">in</span> /etc/xinetd.d/tftp</span><br><span class="line">4 : Some network boot-loaders are missing from /var/lib/cobbler/loaders, you may run <span class="string">'cobbler get-loaders'</span> to download them, or, <span class="keyword">if</span> you only want to handle x86/x86_64 netbooting, you may ensure that you have installed a *recent* version of the syslinux package installed and can ignore this message entirely.  Files <span class="keyword">in</span> this directory, should you want to support all architectures, should include pxelinux.0, menu.c32, elilo.efi, and yaboot. The <span class="string">'cobbler get-loaders'</span> <span class="built_in">command</span> is the easiest way to resolve these requirements.</span><br><span class="line">5 : <span class="built_in">enable</span> and start rsyncd.service with systemctl</span><br><span class="line">6 : debmirror package is not installed, it will be required to manage debian deployments and repositories</span><br><span class="line">7 : ksvalidator was not found, install pykickstart</span><br><span class="line">8 : The default password used by the sample templates <span class="keyword">for</span> newly installed machines (default_password_crypted <span class="keyword">in</span> /etc/cobbler/settings) is still <span class="built_in">set</span> to <span class="string">'cobbler'</span> and should be changed, try: <span class="string">"openssl passwd -1 -salt 'random-phrase-here' 'your-password-here'"</span> to generate new one</span><br><span class="line">9 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class="line">Restart cobblerd and <span class="keyword">then</span> run <span class="string">'cobbler sync'</span> to apply changes.</span><br></pre></td></tr></table></figure><h4 id="1-3-解决cobbler-check的报错"><a href="#1-3-解决cobbler-check的报错" class="headerlink" title="1.3 解决cobbler check的报错"></a>1.3 解决cobbler check的报错</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sed -i 's/server: 127.0.0.1/server: 192.168.1.139/' /etc/cobbler/settings</span></span><br><span class="line"><span class="comment"># sed -i 's/next_server: 127.0.0.1/next_server: 192.168.1.139/' /etc/cobbler/settings</span></span><br><span class="line"><span class="comment"># sed -i 's/manage_dhcp: 0/manage_dhcp: 1/' /etc/cobbler/settings</span></span><br><span class="line"><span class="comment"># sed -i 's/pxe_just_once: 0/pxe_just_once: 1/' /etc/cobbler/settings</span></span><br><span class="line"><span class="comment"># sed -ri "/default_password_crypted/s#(.*: ).*#\1\"`openssl passwd -1 -salt 'oldboy' '123456'`\"#" /etc/cobbler/settings</span></span><br><span class="line"><span class="comment"># sed -i 's#yes#no#' /etc/xinetd.d/tftp</span></span><br><span class="line"><span class="comment"># systemctl start rsyncd</span></span><br><span class="line"><span class="comment"># systemctl enable rsyncd</span></span><br><span class="line"><span class="comment"># systemctl enable tftp.socket</span></span><br><span class="line"><span class="comment"># systemctl start tftp.socket</span></span><br><span class="line"><span class="comment"># systemctl restart cobblerd.service</span></span><br><span class="line"><span class="comment"># sed -i.ori 's#192.168.1#172.16.1#g;22d;23d' /etc/cobbler/dhcp.template</span></span><br><span class="line"><span class="comment"># cobbler sync</span></span><br></pre></td></tr></table></figure><p>下载所需软件包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cobbler get-loaders</span></span><br></pre></td></tr></table></figure></p><p>启动rsync服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start rsyncd.service</span></span><br><span class="line"><span class="comment"># systemctl enable rsyncd.service</span></span><br></pre></td></tr></table></figure></p><p>修改安装完后的root密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># openssl passwd -1 -salt 'CLNS' '123456'</span></span><br></pre></td></tr></table></figure></p><p>第一个引号内的是随机的，第二个引号是你的密码<br>管理dhcp<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sed -i 's/manage_dhcp: 0/manage_dhcp: 1/' /etc/cobbler/settings</span></span><br></pre></td></tr></table></figure></p><p>防止重装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sed -i 's/pxe_just_once: 0/pxe_just_once: 1/' /etc/cobbler/settings</span></span><br></pre></td></tr></table></figure></p><p>注意： 修改完成之后要使用cobbler sync 进行同步，否则不生效。<br>再次检查语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler yum.repos.d]<span class="comment"># cobbler check</span></span><br><span class="line">The following are potential configuration items that you may want to fix:</span><br><span class="line">1 : debmirror package is not installed, it will be required to manage debian deployments and repositories</span><br><span class="line">2 : ksvalidator was not found, install pykickstart</span><br><span class="line">3 : fencing tools were not found, and are required to use the (optional) power management features. install cman or fence-agents to use them</span><br><span class="line">Restart cobblerd and <span class="keyword">then</span> run <span class="string">'cobbler sync'</span> to apply changes.</span><br></pre></td></tr></table></figure></p><p>重启所有服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd.service</span><br><span class="line">systemctl restart cobblerd.service</span><br><span class="line">systemctl restart dhcpd.service</span><br><span class="line">systemctl restart rsyncd.service</span><br><span class="line">systemctl restart tftp.socket</span><br></pre></td></tr></table></figure></p><h4 id="1-4-cobbler-web界面的操作"><a href="#1-4-cobbler-web界面的操作" class="headerlink" title="1.4 cobbler-web界面的操作"></a>1.4 cobbler-web界面的操作</h4><p>浏览器访问：<a href="https://192.168.1.139/cobbler_web" target="_blank" rel="noopener">https://192.168.1.139/cobbler_web</a><br>账号密码默认为cobbler<br>把镜像添加在虚拟机CD/DVD，然后mount /dev/cdrom /mnt<br>在界面导入镜像（import DVD）,写入prefix选择arch与breed, path为 /mnt  然后run<br>在命令行查看进程，三个rsync小时表示导入完成<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@cobbler ~]<span class="comment"># ps -ef |grep rsync</span></span><br><span class="line">root   12026      1  0 19:04 ?   00:00:00 /usr/bin/rsync --daemon --no-detach</span><br><span class="line">root  13554  11778 12 19:51 ?    00:00:06 rsync -a /mnt/ /var/www/cobbler/ks_mirror/CentOS7.4-x86_64 --progress</span><br><span class="line">root   13555  13554  0 19:51 ?     00:00:00 rsync -a /mnt/ /var/www/cobbler/ks_mirror/CentOS7.4-x86_64 --progress</span><br><span class="line">root   13556  13555 33 19:51 ?        00:00:17 rsync -a /mnt/ /var/www/cobbler/ks_mirror/CentOS7.4-x86_64 --progress</span><br><span class="line">root   13590  10759  0 19:52 pts/1    00:00:00 grep --color=auto rsync</span><br></pre></td></tr></table></figure></p><p>启动一台新的虚拟机进行pxe安装系统。</p><p>界面操作有很多功能，可定制化安装操作系统、自定义安装系统等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;cobbler是一个linux服务器安装的服务，可以通过pxe、kickstart自动、快速、批量的安装系统，并可以管理dhcp、dns等。&lt;br&gt;cobbler有一套web界面管理工具（cobbler-web），也可以使用命令行管理。&lt;/p&gt;
&lt;h4 id=&quot;Cobble
      
    
    </summary>
    
      <category term="技术" scheme="http://www.chengshaojin.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://www.chengshaojin.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>openstack queens版本multi-attach实践</title>
    <link href="http://www.chengshaojin.com/2018/04/11/openstack%20queens%E7%89%88%E6%9C%ACmulti-attach%E5%AE%9E%E8%B7%B5/"/>
    <id>http://www.chengshaojin.com/2018/04/11/openstack queens版本multi-attach实践/</id>
    <published>2018-04-11T09:22:00.000Z</published>
    <updated>2018-05-10T02:38:27.552Z</updated>
    
    <content type="html"><![CDATA[<p>Openstack第17个版本Queens发布以来，最引人注目的莫过于cinder后端volume multiattach功能了，这个功能可以把一个volume同时挂载给多个不同的虚拟机，如果其中一个虚拟机宕了，其他的虚拟机可以接管这个卷并正常访问。该功能解决了很多客户的实际需求，是个非常实用的功能。下面我用kolla搭建一个all-in-one的queens环境，cinder后端使用lvm。</p><h2 id="安装openstack-queens"><a href="#安装openstack-queens" class="headerlink" title="安装openstack queens"></a>安装openstack queens</h2><h4 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1.准备环境"></a>1.准备环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@queens ~]<span class="comment"># cat /etc/redhat-release </span></span><br><span class="line">CentOS Linux release 7.2.1511 (Core) </span><br><span class="line">[root@queens ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-327.el7.x86_64</span><br><span class="line">[root@queens ~]<span class="comment"># hostname</span></span><br><span class="line">queens</span><br></pre></td></tr></table></figure><p>关闭firewall、selinux、NetworkManager<br>查看是否开启虚拟化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@queens ~]<span class="comment"># egrep "vmx|svm" /proc/cpuinfo</span></span><br></pre></td></tr></table></figure></p><p>安装基础软件包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@queens ~]<span class="comment"># yum install epel-release</span></span><br><span class="line">[root@queens ~]<span class="comment"># yum install axel vim git curl wget lrzsz gcc  python-devel python-pip</span></span><br></pre></td></tr></table></figure></p><h5 id="2-安装配置docker"><a href="#2-安装配置docker" class="headerlink" title="2.安装配置docker"></a>2.安装配置docker</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># yum install -y docker-ce</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir /etc/systemd/system/docker.service.d</span></span><br><span class="line"><span class="comment"># tee /etc/systemd/system/docker.service.d/kolla.conf &lt;&lt; 'EOF'</span></span><br><span class="line">[Service]</span><br><span class="line">MountFlags=shared</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># vim /usr/lib/systemd/system/docker.service</span></span><br><span class="line"><span class="comment"># ExecStart=/usr/bin/dockerd</span></span><br><span class="line">ExecStart=/usr/bin/dockerd --registry-mirror=http://f2d6cb40.m.daocloud.io --storage-driver=overlay2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br><span class="line"><span class="comment"># systemctl enable docker</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line"><span class="comment"># systemctl status docker</span></span><br></pre></td></tr></table></figure><h5 id="3-安装ansible"><a href="#3-安装ansible" class="headerlink" title="3.安装ansible"></a>3.安装ansible</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum -y install ansible -y</span></span><br></pre></td></tr></table></figure><h5 id="4-下载kolla-ansible-安装配置"><a href="#4-下载kolla-ansible-安装配置" class="headerlink" title="4.下载kolla-ansible,安装配置"></a>4.下载kolla-ansible,安装配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/openstack/kolla-ansible -b stable/queens</span></span><br><span class="line"><span class="comment"># cd kolla-ansible/</span></span><br><span class="line"><span class="comment"># cp -r etc/kolla/ /etc/kolla/</span></span><br><span class="line"><span class="comment"># pip install . -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure><p>修改globals.yml文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@queens ~]<span class="comment"># egrep "^[^#]" /etc/kolla/globals.yml</span></span><br><span class="line">---</span><br><span class="line">kolla_install_type: <span class="string">"source"</span></span><br><span class="line">openstack_release: <span class="string">"queens"</span></span><br><span class="line">kolla_internal_vip_address: <span class="string">"192.168.192.129"</span></span><br><span class="line">docker_namespace: <span class="string">"kolla"</span></span><br><span class="line">network_interface: <span class="string">"eno16777736"</span></span><br><span class="line">neutron_external_interface: <span class="string">"eno33554960"</span></span><br><span class="line">enable_cinder: <span class="string">"yes"</span></span><br><span class="line">enable_cinder_backend_lvm: <span class="string">"yes"</span></span><br><span class="line">enable_haproxy: <span class="string">"no"</span></span><br><span class="line">cinder_volume_group: <span class="string">"cinder-volumes"</span></span><br><span class="line">nova_compute_virt_type: <span class="string">"qemu"</span></span><br><span class="line">tempest_image_id:</span><br><span class="line">tempest_flavor_ref_id:</span><br><span class="line">tempest_public_network_id:</span><br><span class="line">tempest_floating_network_name:</span><br></pre></td></tr></table></figure></p><h5 id="5-配置lvm"><a href="#5-配置lvm" class="headerlink" title="5.配置lvm"></a>5.配置lvm</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pvcreate /dev/sdb</span></span><br><span class="line"><span class="comment"># vgcreate cinder-volume /dev/sdb</span></span><br></pre></td></tr></table></figure><h5 id="6-安装kolla及部署openstack"><a href="#6-安装kolla及部署openstack" class="headerlink" title="6.安装kolla及部署openstack"></a>6.安装kolla及部署openstack</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kolla-genpwd</span></span><br><span class="line">修改/etc/kolla/passwords.yml文件</span><br><span class="line"><span class="comment"># kolla-ansible prechecks</span></span><br><span class="line"><span class="comment"># kolla-ansible pull</span></span><br><span class="line"><span class="comment"># kolla-ansible deploy</span></span><br><span class="line"><span class="comment"># kolla-ansible post-deploy</span></span><br></pre></td></tr></table></figure><h5 id="6-openstack环境配置"><a href="#6-openstack环境配置" class="headerlink" title="6.openstack环境配置"></a>6.openstack环境配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装openstack client</span><br><span class="line"><span class="comment"># pip install python-openstackclient</span></span><br><span class="line">修改init-runonce文件，设置创建网络的ip池</span><br><span class="line">加载环境变量</span><br><span class="line"><span class="comment"># source /etc/kolla/admin-openrc.sh</span></span><br><span class="line">初始化</span><br><span class="line"><span class="comment"># cd /usr/share/kolla-ansibale &amp;&amp; ./init-runonce</span></span><br></pre></td></tr></table></figure><h2 id="multiattach实践"><a href="#multiattach实践" class="headerlink" title="multiattach实践"></a>multiattach实践</h2><h5 id="1-创建multiattach的卷类型并设置"><a href="#1-创建multiattach的卷类型并设置" class="headerlink" title="1.创建multiattach的卷类型并设置"></a>1.创建multiattach的卷类型并设置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@queens ~]<span class="comment"># cinder type-create multiattach</span></span><br><span class="line">+--------------------------------------+-------------+-------------+-----------+</span><br><span class="line">| ID                                   | Name        | Description | Is_Public |</span><br><span class="line">+--------------------------------------+-------------+-------------+-----------+</span><br><span class="line">| ea3205d6-e3a0-4dd4-974a-20fab2830bf7 | multiattach | -           | True      |</span><br><span class="line">+--------------------------------------+-------------+-------------+-----------+</span><br><span class="line">[root@queens ~]<span class="comment"># cinder type-key multiattach set multiattach="&lt;is&gt; True"</span></span><br></pre></td></tr></table></figure><h4 id="2-创建一个1G的volume-使用刚刚创建的卷类型"><a href="#2-创建一个1G的volume-使用刚刚创建的卷类型" class="headerlink" title="2.创建一个1G的volume,使用刚刚创建的卷类型"></a>2.创建一个1G的volume,使用刚刚创建的卷类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@queens ~]<span class="comment"># cinder create 1 --name multiattach_volume --volume-type ea3205d6-e3a0-4dd4-974a-20fab2830bf7</span></span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| Property                       | Value                                |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| attachments                    | []                                   |</span><br><span class="line">| availability_zone              | nova                                 |</span><br><span class="line">| bootable                       | <span class="literal">false</span>                                |</span><br><span class="line">| consistencygroup_id            | None                                 |</span><br><span class="line">| created_at                     | 2018-04-11T09:13:57.000000           |</span><br><span class="line">| description                    | None                                 |</span><br><span class="line">| encrypted                      | False                                |</span><br><span class="line">| id                             | d93e1565-6dd2-442a-a017-f1dc5cc91d86 |</span><br><span class="line">| metadata                       | &#123;&#125;                                   |</span><br><span class="line">| migration_status               | None                                 |</span><br><span class="line">| multiattach                    | True                                 |</span><br><span class="line">| name                           | multiattach_volume                   |</span><br><span class="line">| os-vol-host-attr:host          | queens@lvm-1<span class="comment">#lvm-1                   |</span></span><br><span class="line">| os-vol-mig-status-attr:migstat | None                                 |</span><br><span class="line">| os-vol-mig-status-attr:name_id | None                                 |</span><br><span class="line">| os-vol-tenant-attr:tenant_id   | fbe246bc04a146928d8ecaf0e32d8eec     |</span><br><span class="line">| replication_status             | None                                 |</span><br><span class="line">| size                           | 1                                    |</span><br><span class="line">| snapshot_id                    | None                                 |</span><br><span class="line">| source_volid                   | None                                 |</span><br><span class="line">| status                         | creating                             |</span><br><span class="line">| updated_at                     | 2018-04-11T09:13:57.000000           |</span><br><span class="line">| user_id                        | 7593374948ec463fa09a71a24c82c69e     |</span><br><span class="line">| volume_type                    | multiattach                          |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br></pre></td></tr></table></figure><h4 id="3-创建两个虚拟机"><a href="#3-创建两个虚拟机" class="headerlink" title="3.创建两个虚拟机"></a>3.创建两个虚拟机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@queens ~]<span class="comment"># nova list</span></span><br><span class="line">+--------------------------------------+--------+--------+------------+-------------+--------------------+</span><br><span class="line">| ID                                   | Name   | Status | Task State | Power State | Networks           |</span><br><span class="line">+--------------------------------------+--------+--------+------------+-------------+--------------------+</span><br><span class="line">| 4203f1d1-1511-437d-bd0d-01b23bf01661 | <span class="built_in">test</span>-1 | ACTIVE | -          | Running     | public1=10.0.2.150 |</span><br><span class="line">| dd773d0e-fe5e-47d2-b5b0-aafbaab5b41b | <span class="built_in">test</span>-2 | ACTIVE | -          | Running     | public1=10.0.2.157 |</span><br><span class="line">+--------------------------------------+--------+--------+------------+-------------+--------------------+</span><br></pre></td></tr></table></figure><h4 id="4-挂载multiattach-volume到两个虚拟机"><a href="#4-挂载multiattach-volume到两个虚拟机" class="headerlink" title="4.挂载multiattach_volume到两个虚拟机"></a>4.挂载multiattach_volume到两个虚拟机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@queens ~]<span class="comment"># nova volume-attach 4203f1d1-1511-437d-bd0d-01b23bf01661 d93e1565-6dd2-442a-a017-f1dc5cc91d86</span></span><br><span class="line">+----------+--------------------------------------+</span><br><span class="line">| Property | Value                                |</span><br><span class="line">+----------+--------------------------------------+</span><br><span class="line">| device   | /dev/vdb                             |</span><br><span class="line">| id       | d93e1565-6dd2-442a-a017-f1dc5cc91d86 |</span><br><span class="line">| serverId | 4203f1d1-1511-437d-bd0d-01b23bf01661 |</span><br><span class="line">| volumeId | d93e1565-6dd2-442a-a017-f1dc5cc91d86 |</span><br><span class="line">+----------+--------------------------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@queens ~]<span class="comment"># nova volume-attach dd773d0e-fe5e-47d2-b5b0-aafbaab5b41b d93e1565-6dd2-442a-a017-f1dc5cc91d86</span></span><br><span class="line">+----------+--------------------------------------+</span><br><span class="line">| Property | Value                                |</span><br><span class="line">+----------+--------------------------------------+</span><br><span class="line">| device   | /dev/vdb                             |</span><br><span class="line">| id       | d93e1565-6dd2-442a-a017-f1dc5cc91d86 |</span><br><span class="line">| serverId | dd773d0e-fe5e-47d2-b5b0-aafbaab5b41b |</span><br><span class="line">| volumeId | d93e1565-6dd2-442a-a017-f1dc5cc91d86 |</span><br><span class="line">+----------+--------------------------------------+</span><br></pre></td></tr></table></figure><h4 id="5-查看卷信息，可以看到被挂载在两个虚拟机上"><a href="#5-查看卷信息，可以看到被挂载在两个虚拟机上" class="headerlink" title="5.查看卷信息，可以看到被挂载在两个虚拟机上"></a>5.查看卷信息，可以看到被挂载在两个虚拟机上</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@queens ~]<span class="comment"># cinder show d93e1565-6dd2-442a-a017-f1dc5cc91d86</span></span><br><span class="line">+--------------------------------+----------------------------------------------------------------------------------+</span><br><span class="line">| Property                       | Value                                                                            |</span><br><span class="line">+--------------------------------+----------------------------------------------------------------------------------+</span><br><span class="line">| attached_servers               | [<span class="string">'4203f1d1-1511-437d-bd0d-01b23bf01661'</span>, <span class="string">'dd773d0e-fe5e-47d2-b5b0-aafbaab5b41b'</span>] |</span><br><span class="line">| attachment_ids                 | [<span class="string">'26631abb-cfb4-48a8-9da2-30bb47f26905'</span>, <span class="string">'fc0cbde4-2496-4123-a020-a409ac93b83d'</span>] |</span><br><span class="line">| availability_zone              | nova                                                                             |</span><br><span class="line">| bootable                       | <span class="literal">false</span>                                                                            |</span><br><span class="line">| consistencygroup_id            | None                                                                             |</span><br><span class="line">| created_at                     | 2018-04-11T09:13:57.000000                                                       |</span><br><span class="line">| description                    | None                                                                             |</span><br><span class="line">| encrypted                      | False                                                                            |</span><br><span class="line">| id                             | d93e1565-6dd2-442a-a017-f1dc5cc91d86                                             |</span><br><span class="line">| metadata                       | attached_mode : rw                                                               |</span><br><span class="line">| migration_status               | None                                                                             |</span><br><span class="line">| multiattach                    | True                                                                             |</span><br><span class="line">| name                           | multiattach_volume                                                               |</span><br><span class="line">| os-vol-host-attr:host          | queens@lvm-1<span class="comment">#lvm-1                                                               |</span></span><br><span class="line">| os-vol-mig-status-attr:migstat | None                                                                             |</span><br><span class="line">| os-vol-mig-status-attr:name_id | None                                                                             |</span><br><span class="line">| os-vol-tenant-attr:tenant_id   | fbe246bc04a146928d8ecaf0e32d8eec                                                 |</span><br><span class="line">| replication_status             | None                                                                             |</span><br><span class="line">| size                           | 1                                                                                |</span><br><span class="line">| snapshot_id                    | None                                                                             |</span><br><span class="line">| source_volid                   | None                                                                             |</span><br><span class="line">| status                         | <span class="keyword">in</span>-use                                                                           |</span><br><span class="line">| updated_at                     | 2018-04-11T09:16:02.000000                                                       |</span><br><span class="line">| user_id                        | 7593374948ec463fa09a71a24c82c69e                                                 |</span><br><span class="line">| volume_type                    | multiattach                                                                      |</span><br><span class="line">+--------------------------------+----------------------------------------------------------------------------------</span><br><span class="line">进入两个虚拟机系统可以看到该磁盘信息。</span><br></pre></td></tr></table></figure><h4 id="6-测试HA"><a href="#6-测试HA" class="headerlink" title="6.测试HA"></a>6.测试HA</h4><p>1.进入第一个虚拟机系统分区、格式化、挂载到/mnt并写入文件。<br>2.模拟虚拟机故障，然后进入第二个虚拟机系统挂载分区，查看文件。可以看到第一个虚拟机写入的文件，并能继续写入。</p><h4 id="7-Known-issues-and-limitations"><a href="#7-Known-issues-and-limitations" class="headerlink" title="7.Known issues and limitations"></a>7.Known issues and limitations</h4><ul><li>Retyping an in-use volume from a multiattach-capable type to a non-multiattach-capable type, or vice-versa, is not supported.</li><li>It is not recommended to retype an in-use multiattach volume if that volume has more than one active read/write attachment.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Openstack第17个版本Queens发布以来，最引人注目的莫过于cinder后端volume multiattach功能了，这个功能可以把一个volume同时挂载给多个不同的虚拟机，如果其中一个虚拟机宕了，其他的虚拟机可以接管这个卷并正常访问。该功能解决了很多客户的实
      
    
    </summary>
    
      <category term="技术" scheme="http://www.chengshaojin.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="openstack" scheme="http://www.chengshaojin.com/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>那些看一眼就惊艳了时光的诗句</title>
    <link href="http://www.chengshaojin.com/2018/03/31/%E9%82%A3%E4%BA%9B%E4%B8%80%E7%9C%BC%E5%B0%B1%E6%83%8A%E8%89%B3%E4%BA%86%E6%97%B6%E5%85%89%E7%9A%84%E8%AF%97%E5%8F%A5/"/>
    <id>http://www.chengshaojin.com/2018/03/31/那些一眼就惊艳了时光的诗句/</id>
    <published>2018-03-31T13:17:11.000Z</published>
    <updated>2018-03-31T15:19:59.195Z</updated>
    
    <content type="html"><![CDATA[<p>十里青山远，潮平路带沙。<br>数声啼鸟怨年华。<br>又是凄凉时候、在天涯。<br>白露收残暑，清风衬晚霞。<br>绿杨堤畔闹荷花。<br>记得年时沽酒、那人家。<br>        ——《南柯子 十里青山远》仲殊</p><p>兜兜转转两三年，如今三年不似那三年。偷的半日的时光，在那十里的果园里笑开了花。</p><hr><p>把酒祝东风，且共从容。垂杨紫陌洛城东。总是当时携手处，游遍芳丛。<br>聚散苦匆匆，此恨无穷。今年花胜去年红。可惜明年花更好，知与谁同？<br>        ——《浪淘沙 把酒祝东风》欧阳修</p><p>年年岁岁花相似，岁岁年年人不同。愿未来如你所期，不负时光不忘初心。</p><hr><p>沧海蓝田共烟霞，珠玉冷暖在谁家。<br>金人莫论兴衰事，铜仙惯乘来去车。<br>孤艇酒酣焚经典，高枝月明判凤鸦。<br>蓬莱枯死三千树，为君重满碧桃花。<br>        ——摘自木心作品《西班牙三棵树》</p><p>蓬莱枯死三千树，为君重满碧桃花。</p><p>哀利丝•霍珈走过来悄悄说，如果有人欺侮你，你就种一棵树——这也太美丽得犬儒主义的春天似的；我是，这样想，当谁欺侮了谁时，神灵便暗中播一棵树，森林是这样形成的，谁树即谁人，却又都不知道。</p><hr><p>一别都门三改火，天涯踏尽红尘。依然一笑作春温。无波真古井，有节是秋筠。<br>惆怅孤帆连夜发，送行淡月微云。樽前不用翠眉颦。人生如逆旅，我亦是行人。<br>        ——《临江仙·送钱穆父》苏轼</p><hr><p>常羡人间琢玉郎，天应乞与点酥娘。尽道清歌传皓齿，风起，雪飞炎海变清凉。<br>万里归来颜愈少，微笑，笑时犹带岭梅香。试问岭南应不好，却道：此心安处是吾乡。<br>        ——《定风波 南海归赠王定国侍人寓娘》苏轼</p><hr><p>细雨斜风作晓寒，淡烟疏柳媚晴滩。入淮清洛渐漫漫。<br>雪沫乳花浮午盏，蓼茸蒿笋试春盘。人间有味是清欢。<br>        ——《浣溪沙 细雨斜风作晓寒》苏轼</p><p>人间有味是清欢</p><hr><p>瀑布的水逆流而上，<br>蒲公英种子从远处飘回，聚成伞的模样，<br>太阳从西边升起，落向东方。 </p><p>子弹退回枪膛，<br>运动员回到起跑线上，<br>我交回录取通知书，忘了十年寒窗。 </p><p>厨房里飘来饭菜的香，<br>你把我的卷子签好名字，<br>关掉电视，帮我把书包背上。 </p><p>你还在我身旁 。<br>        ——《你还在我身旁》香港中文大学学生作品</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;十里青山远，潮平路带沙。&lt;br&gt;数声啼鸟怨年华。&lt;br&gt;又是凄凉时候、在天涯。&lt;br&gt;白露收残暑，清风衬晚霞。&lt;br&gt;绿杨堤畔闹荷花。&lt;br&gt;记得年时沽酒、那人家。&lt;br&gt;        ——《南柯子 十里青山远》仲殊&lt;/p&gt;
&lt;p&gt;兜兜转转两三年，如今三年不似那三年。偷的
      
    
    </summary>
    
      <category term="生活" scheme="http://www.chengshaojin.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="诗句" scheme="http://www.chengshaojin.com/tags/%E8%AF%97%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>openstack配置lvm与nfs的cinder多后端</title>
    <link href="http://www.chengshaojin.com/2018/03/14/openstack%E9%85%8D%E7%BD%AElvm%E4%B8%8Enfs%E7%9A%84cinder%E5%A4%9A%E5%90%8E%E7%AB%AF/"/>
    <id>http://www.chengshaojin.com/2018/03/14/openstack配置lvm与nfs的cinder多后端/</id>
    <published>2018-03-14T08:39:14.000Z</published>
    <updated>2018-03-14T09:51:24.572Z</updated>
    
    <content type="html"><![CDATA[<p>不知道自己习惯还是怎么，潜意识里总觉得openstack与ceph是最配的一对，平时测试自己玩都是ceph做后端，最近有个客户的POC，明确要求用lvm，而且他们用的存储还都是nfs，所以我就测试了下用lvm与nfs做cinder的多后端，以此记录。<br>测试openstack环境还是用kolla部署的pika版,先使用lvm做cinder后端，然后再配置nfs。</p><h4 id="在每个存储节点准备一块单独的盘创建-volume-group"><a href="#在每个存储节点准备一块单独的盘创建-volume-group" class="headerlink" title="在每个存储节点准备一块单独的盘创建 volume group"></a>在每个存储节点准备一块单独的盘创建 volume group</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pvcreate /dev/sdb</span></span><br><span class="line"><span class="comment"># vgcreate cinder-volume /dev/sdb</span></span><br></pre></td></tr></table></figure><h4 id="在global文件中打开lvm"><a href="#在global文件中打开lvm" class="headerlink" title="在global文件中打开lvm"></a>在global文件中打开lvm</h4><pre><code>enable_cinder_backend_lvm: &quot;yes&quot;</code></pre><p>lvm的配置就这么多，要注意的是你的vg的名字必须和global文件中cinder_volume_group的名字一致。<br>cat /etc/kolla/globals.yml | grep cinder_volume<br> cinder_volume_group: “cinder-volumes”<br>在cinder后端不使用ceph的时候，global文件里默认glance存储在本地文件里。</p><h4 id="配置nfs"><a href="#配置nfs" class="headerlink" title="配置nfs"></a>配置nfs</h4><p>安装nfs,确保nfs与rpcbind服务正常,确认nfs设备创建成功，能够挂载并有读写权限，可以在/etc/exports文件中这么写：<br>/mnt/share 192.168.226.0/24(rw,sync,no_root_squash)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t nfs 192.168.226.128:/mnt/share /nfs_shares</span><br></pre></td></tr></table></figure></p><p>在cinder.conf文件中做如下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/kolla/cinder-volume/cinder.conf</span><br><span class="line"></span><br><span class="line">[DEFAULT]</span><br><span class="line">enabled_backends = nfs</span><br><span class="line"></span><br><span class="line">[nfs]</span><br><span class="line">volume_backend_name = nfs</span><br><span class="line">volume_driver = cinder.volume.drivers.nfs.NfsDriver</span><br><span class="line">nas_host = 192.168.226.128</span><br><span class="line">nas_share_path = /mnt/share</span><br><span class="line">nfs_mount_attempts = 3</span><br></pre></td></tr></table></figure></p><p>重启cinder_volume容器，查看日志看是否加载成功。</p><h4 id="创建两个cinder卷类型"><a href="#创建两个cinder卷类型" class="headerlink" title="创建两个cinder卷类型"></a>创建两个cinder卷类型</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># source /etc/kolla/admin-openrc.sh</span></span><br><span class="line"><span class="comment"># cinder type-create lvm</span></span><br><span class="line"><span class="comment"># cinder type-create nfs</span></span><br><span class="line"><span class="comment"># cinder type-list</span></span><br><span class="line">+--------------------------------------+------+-------------+-----------+</span><br><span class="line">| ID                                   | Name | Description | Is_Public |</span><br><span class="line">+--------------------------------------+------+-------------+-----------+</span><br><span class="line">| c9936b51-aaf1-4822-80fe-f0a1d91196bf | lvm  | -           | True      |</span><br><span class="line">| cf3a55be-a32c-412d-9175-33e1bd33f45b | nfs  | -           | True      |</span><br><span class="line">+--------------------------------------+------+-------------+-----------+</span><br></pre></td></tr></table></figure><h4 id="设置卷类型的key键值"><a href="#设置卷类型的key键值" class="headerlink" title="设置卷类型的key键值"></a>设置卷类型的key键值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cinder type-key lvm set volume_backend_name=lvm-1</span></span><br><span class="line"><span class="comment"># cinder type-key nfs set volume_backend_name=nfs-1</span></span><br><span class="line"><span class="comment"># cinder extra-specs-list</span></span><br><span class="line">+--------------------------------------+------+----------------------------------+</span><br><span class="line">| ID                                   | Name | extra_specs                      |</span><br><span class="line">+--------------------------------------+------+----------------------------------+</span><br><span class="line">| c9936b51-aaf1-4822-80fe-f0a1d91196bf | lvm  | &#123;<span class="string">'volume_backend_name'</span>: <span class="string">'lvm-1'</span>&#125; |</span><br><span class="line">| cf3a55be-a32c-412d-9175-33e1bd33f45b | nfs  | &#123;<span class="string">'volume_backend_name'</span>: <span class="string">'nfs-1'</span>&#125; |</span><br><span class="line">+--------------------------------------+------+----------------------------------+</span><br></pre></td></tr></table></figure><p>在dashboard创建卷的时候就可以选择使用哪种后端：<br><img src="C:\Users\GTT\Desktop\Hexo\图片\cinder.png" alt="cinder"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cinder create --volume_type lvm --display_name volume_lvm 1</span></span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| Property                       | Value                                |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| attachments                    | []                                   |</span><br><span class="line">| availability_zone              | nova                                 |</span><br><span class="line">| bootable                       | <span class="literal">false</span>                                |</span><br><span class="line">| consistencygroup_id            | None                                 |</span><br><span class="line">| created_at                     | 2018-03-14T17:31:28.000000           |</span><br><span class="line">| description                    | None                                 |</span><br><span class="line">| encrypted                      | False                                |</span><br><span class="line">| id                             | a17fde61-02a3-48ff-ba10-98908770704b |</span><br><span class="line">| metadata                       | &#123;&#125;                                   |</span><br><span class="line">| migration_status               | None                                 |</span><br><span class="line">| multiattach                    | False                                |</span><br><span class="line">| name                           | volume_lvm                           |</span><br><span class="line">| os-vol-host-attr:host          | None                                 |</span><br><span class="line">| os-vol-mig-status-attr:migstat | None                                 |</span><br><span class="line">| os-vol-mig-status-attr:name_id | None                                 |</span><br><span class="line">| os-vol-tenant-attr:tenant_id   | c0875c01f9394cffac2f83c43bce2e80     |</span><br><span class="line">| replication_status             | None                                 |</span><br><span class="line">| size                           | 1                                    |</span><br><span class="line">| snapshot_id                    | None                                 |</span><br><span class="line">| source_volid                   | None                                 |</span><br><span class="line">| status                         | creating                             |</span><br><span class="line">| updated_at                     | None                                 |</span><br><span class="line">| user_id                        | 586c61eb3200477b9c03a22cd9baea50     |</span><br><span class="line">| volume_type                    | lvm                                  |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line"><span class="comment"># cinder create --volume_type nfs --display_name volume_nfs 1</span></span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| Property                       | Value                                |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br><span class="line">| attachments                    | []                                   |</span><br><span class="line">| availability_zone              | nova                                 |</span><br><span class="line">| bootable                       | <span class="literal">false</span>                                |</span><br><span class="line">| consistencygroup_id            | None                                 |</span><br><span class="line">| created_at                     | 2018-03-14T17:33:13.000000           |</span><br><span class="line">| description                    | None                                 |</span><br><span class="line">| encrypted                      | False                                |</span><br><span class="line">| id                             | 360865c0-90d3-4c69-b463-c5771d39962e |</span><br><span class="line">| metadata                       | &#123;&#125;                                   |</span><br><span class="line">| migration_status               | None                                 |</span><br><span class="line">| multiattach                    | False                                |</span><br><span class="line">| name                           | volume_nfs                           |</span><br><span class="line">| os-vol-host-attr:host          | None                                 |</span><br><span class="line">| os-vol-mig-status-attr:migstat | None                                 |</span><br><span class="line">| os-vol-mig-status-attr:name_id | None                                 |</span><br><span class="line">| os-vol-tenant-attr:tenant_id   | c0875c01f9394cffac2f83c43bce2e80     |</span><br><span class="line">| replication_status             | None                                 |</span><br><span class="line">| size                           | 1                                    |</span><br><span class="line">| snapshot_id                    | None                                 |</span><br><span class="line">| source_volid                   | None                                 |</span><br><span class="line">| status                         | creating                             |</span><br><span class="line">| updated_at                     | None                                 |</span><br><span class="line">| user_id                        | 586c61eb3200477b9c03a22cd9baea50     |</span><br><span class="line">| volume_type                    | nfs                                  |</span><br><span class="line">+--------------------------------+--------------------------------------+</span><br></pre></td></tr></table></figure><p>到此cinder的lvm与nfs多后端配置完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不知道自己习惯还是怎么，潜意识里总觉得openstack与ceph是最配的一对，平时测试自己玩都是ceph做后端，最近有个客户的POC，明确要求用lvm，而且他们用的存储还都是nfs，所以我就测试了下用lvm与nfs做cinder的多后端，以此记录。&lt;br&gt;测试openst
      
    
    </summary>
    
      <category term="技术" scheme="http://www.chengshaojin.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="openstack" scheme="http://www.chengshaojin.com/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>2018年春节前最后一天上班的晚上</title>
    <link href="http://www.chengshaojin.com/2018/02/09/2018%E5%B9%B4%E6%98%A5%E8%8A%82%E5%89%8D%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%E4%B8%8A%E7%8F%AD%E7%9A%84%E6%99%9A%E4%B8%8A/"/>
    <id>http://www.chengshaojin.com/2018/02/09/2018年春节前最后一天上班的晚上/</id>
    <published>2018-02-09T15:04:34.000Z</published>
    <updated>2018-02-14T12:34:25.748Z</updated>
    
    <content type="html"><![CDATA[<p>晚上收拾了下明天回家的行李，想想一年就这样又过去了，是不是应该总结一下过去一年的得失、荣辱、希望和失望，这样也给自己一种仪式感，写一写感悟，谈一谈一年中的改变，想一想18年应该做哪些事，提醒自己不负时光，能光明前进。</p><p>慢慢静下心来，匆匆2018年也已经是2月份了，这两月工作不是特别的忙，上班时间基本也是自己安排，也让自己放松了很多，下班后都是看小说，没干什么正事，熬了几个夜晚看完了曾国藩三部曲，导致自己最近总是爱琢磨别人说的话到底有什么深层意思，其实也没有什么意思，平常人哪有那么高深莫测，没干啥事反而让自己很累。后来就自己劝自己我等凡夫俗子就别想那么多了，别人一张口就知道人家心里想什么的内家本事，没个几十年的功力哪能轻易练成，哈哈。开个玩笑，还是说说自己到底干了什么吧。</p><h3 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h3><p>这一年发生最重要的事就是在十月份换了工作，这是我没有想到的，虽然依然在同一个行业，但在一家公司呆的时间太短总不是一件太好的事，再说当时的领导对初入职场的我在做人做事各方面有很大的帮助，很多事都是亲历亲为的教我们，我很感谢他，希望他在新的一年工作顺利，身体健康。然后因为很多其他原因，当然也有一部分我自己的原因，就匆匆辞职了换了一份工作，依然在做openstack运维实施方面的工作。其实当时刚毕业的时候自己真的是十分的迷茫，不知道自己能干什么，看到openstack正如日中天，就开始学习，现在也能因此谋得一份工作也感到十分的庆幸。即使openstack呈下落趋势，任何开源项目都有其上升期和下降期，但是现在也会因为工作需要去不断的学习新的知识，不再因为不知道自己能干什么想干什么而迷茫，我想这应该是自己这一年最大的收获吧。</p><p>其实工作中能识人然后正确的待人也是工作实力的一部分，刚出校门的我，因为说话做事太直，吃了不少的亏，吃一斩长一智嘛，现在想来其实吃吃亏也是蛮好的。让自己认识到自己情商的严重不足，应该注意慢慢提高。我也一直在提醒自己要不忘初心，做人做事要有自己的底线，不要变得太圆滑，成为自己以前讨厌的人。</p><h3 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h3><p>离开校园生活变得非常规律了，以前在学校总是抽烟，现在也不抽了，其实我是没有烟瘾的，所以说戒就戒了。自从离开学校开始租房子了，周末有时间就开始自己做饭了，这一点是我非常开心的，生活的情趣来源于不断的创造，尤其当你做出一盘色香味俱全的菜的时候，那种成就感是不由而生的。由此也感受到，其实每天做饭也是一件非常耗时间的，而且加上洗锅也是比较累的，做饭的时候信心满满，但是吃完就不想洗锅了，哈哈，争取以后就买自动洗碗机了，看了网上的评论，说是还不错。<br>一年也没怎么出去旅行，大学的时候没钱，反而经常出去玩，在北京一年多，连北京市也没怎么玩过，国庆放假的时候计划好了出去，结果加了四天班，也再没心情出去了，以后心态有待改正，不工作的时候还是应该多出去看看的，尤其一些自然风景区，大自然自带一种开阔心胸的功能。<br>唯一遗憾的就是自从毕业就很少再踢球了，这项占据了大学最多时间的运动，现在却很少去踢了。我也能感觉到身体机能大不如以前了，总想着去锻炼，但都是时间用来做了其他事了，其实归根结底还是太懒了。很怀念当年参加大学生运动会的时候跟球队吃住在一起的日子以及每天下午在操场练球的日子。</p><h3 id="2018年计划要做的："><a href="#2018年计划要做的：" class="headerlink" title="2018年计划要做的："></a>2018年计划要做的：</h3><p>1.学驾照。虽说人工智能的突飞猛进已经实现了无人驾驶，但还是想体验驾驶的乐趣。一定要做的。<br>2.学习python语言。简直刻不容缓啊。<br>3.能初学投资，虽然没钱，但我也有一颗想实现财富自由的心啊。<br>4.能读20本以上的书。20本应该很少了，比不了大神，自己开心就好，貌似最近没咋上心工作，下班已经读了三四本了吧，主要是必须要完成，没有上线，不要辜负了自己的kindle。哈哈。<br>5.提高自己的厨艺，会做菜品的数量有待丰富，没有多大要求，能满足家常就好了。</p><p>絮絮叨叨没说啥正事，感觉都是废话啊。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;晚上收拾了下明天回家的行李，想想一年就这样又过去了，是不是应该总结一下过去一年的得失、荣辱、希望和失望，这样也给自己一种仪式感，写一写感悟，谈一谈一年中的改变，想一想18年应该做哪些事，提醒自己不负时光，能光明前进。&lt;/p&gt;
&lt;p&gt;慢慢静下心来，匆匆2018年也已经是2月份
      
    
    </summary>
    
      <category term="生活" scheme="http://www.chengshaojin.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://www.chengshaojin.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>docker单机环境下的网络与通信</title>
    <link href="http://www.chengshaojin.com/2018/01/22/docker%E5%8D%95%E6%9C%BA%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1/"/>
    <id>http://www.chengshaojin.com/2018/01/22/docker单机环境下的网络与通信/</id>
    <published>2018-01-22T02:09:14.000Z</published>
    <updated>2018-01-26T02:33:58.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、docker单机环境的下的网络"><a href="#一、docker单机环境的下的网络" class="headerlink" title="一、docker单机环境的下的网络"></a>一、docker单机环境的下的网络</h2><h3 id="1-三种原生网络"><a href="#1-三种原生网络" class="headerlink" title="1.三种原生网络"></a>1.三种原生网络</h3><p>docker提供三种原生网络，在安装的时候就会自动在host创建三个网络，用 docker network ls 命令查看，分别是：bridge、host、none。在创建容器的时候可以通过--network=none/host/bridge 来指定使用哪一种网络。例如：</p><pre><code># docker run -it --network=none busybox</code></pre><p>none网络：什么都没有的网络，这个网络的容器只有一个lo网卡，是一个网络封闭的容器，对一些安全性较高，不需要联网的应用可以使用none网络。<br>host网络：使用host网络的容器与主机的网络配置完全一样，连hostname都一样。host网络的好处是性能好，但是不够灵活。比如端口与host会冲突.<br>bridge网络：安装docker的时候都会默认创建一个 docker0 的linux bridge，如果不指定网络，默认创建的容器的网络都会挂在 docker0 上。bridge网络的容器有一对veth pair,是一对连起来的网卡，一边在容器里，一边挂在host的docker0 上，这样相当于容器里的一头也挂在 docker0 上。用 docker network inspect bridge 看下bridge网络的配置信息，可以看到bridge网络配置的subnet、网关等信息。</p><h3 id="2-自定义网络"><a href="#2-自定义网络" class="headerlink" title="2.自定义网络"></a>2.自定义网络</h3><p>除了上述三种docker自动创建的网络，用户也可以根据业务需求自定义网络。docker提供三种user-defined网络驱动：bridge、overlay、macvlan。overlay与 macvlan用于创建跨主机网络。<br>通过创建bridge驱动来创建bridge网络，ip网段由docker0自动分配，例如：</p><pre><code># docker network create --driver bridge my_net1</code></pre><p>也可以通过--subnet 和--gateway 自己指定Ip网段：</p><pre><code># docker network create --driver bridge --subnet 172.18.22.0/24 --gateway 172.18.22.1 my_net2</code></pre><p>使用自定义的网络也是通过--network 指定，容器中的ip 既可以自动分配也可以在启动容器的时候使用 --ip 指定ip。</p><pre><code># docker run -it --network=my_net2 --ip 172.18.22.8 busybox# docker run -it --network=my_net2 centos</code></pre><p>注：只有使用--subnet 创建的网络才能指定静态ip。</p><h2 id="二、单机环境下容器之间的通信"><a href="#二、单机环境下容器之间的通信" class="headerlink" title="二、单机环境下容器之间的通信"></a>二、单机环境下容器之间的通信</h2><p>我们可以想到，挂在同一个bridge上的容器网段和网关都相同，肯定是可以互通的，比如使用上述的my_net2网络的两个容器busybox和centos应该是互通的，事实上也是如此。但是分别使用my_net1和my_net2的两个不同网段的容器能通吗？，答案当然是不行！那么怎么才能让他们互通呢？打开路由转发，加一条路由？这样按理来说应该是可以的，但是事实上加了路由，打开路由转发也不通。这就是docker不同网络的隔离性。docker在iptables上drop了两个网桥之间的双向流向。那么到底怎么样两个不同网段的容器才能通信呢？<br>只有加一块网卡了。在一个容器里加一块另一个网桥的网卡，通过这块网卡与另一个容器通信。</p><h3 id="容器之间的三种通信方式"><a href="#容器之间的三种通信方式" class="headerlink" title="容器之间的三种通信方式"></a>容器之间的三种通信方式</h3><h4 id="1-IP通信"><a href="#1-IP通信" class="headerlink" title="1.IP通信"></a>1.IP通信</h4><p>如上所说，在创建容器时通过--network 指定相应的网络，或者通过 docker network connect 将现有容器加入指定网络，并且都是同一个网络的网卡，这样两个容器就可以通信了。</p><h4 id="2-Docker-DNS-Server"><a href="#2-Docker-DNS-Server" class="headerlink" title="2.Docker DNS Server"></a>2.Docker DNS Server</h4><p>docker 自带 DNS服务，使容器可以直接通过“容器名”通信。</p><pre><code># docker run -it --network=my_net2 --name=bbox1 busybox# docker run -it --network=my_net2 --name=bbox2 busybox在bbox1里pingbbox2 可以通   # ping bbox2</code></pre><p>注：使用DNS 只能在 user-defined网络中使用，默认的Bridge不能使用。</p><h4 id="3-joined-容器"><a href="#3-joined-容器" class="headerlink" title="3.joined 容器"></a>3.joined 容器</h4><p>joined容器通过容器之间共享网卡和配置信息，通过127.0.0.1来直接通信。</p><pre><code># docker run -d -it --name=web1 httpd# docker run -it --network=container:web1 busybox这样两个容器内的网卡mac与ip完全一样，busybox可以直接使用127.0.0.1访问web1的httpd服务。</code></pre><p>这种通信方式适合以下场景：<br>    1）.不同容器中的应用程序希望高效快速的通信，比如web server与app server。<br>    2）.希望监控其他容器的网络流量，比如运行在独立容器中的网络监控程序。</p><h2 id="三、容器与外网的通信"><a href="#三、容器与外网的通信" class="headerlink" title="三、容器与外网的通信"></a>三、容器与外网的通信</h2><p>容器与外网的通信其实与其他环境与外网的通信一样的，通过 NAT 访问外网，通过 端口映射 使外网访问容器。</p><h4 id="1-容器访问外网"><a href="#1-容器访问外网" class="headerlink" title="1.容器访问外网"></a>1.容器访问外网</h4><p>主机可以访问外网的情况下，使用默认bridge网络的容器默认也能通外网，关键我们理解下通外网的本职：<br>通过 # iptables -t nat -S 可以看到：<br>当使用docker0 这个网桥的bridge网络的容器，向外Ping的时候，docker0收到容器网段的外出包，把它给masquerade处理，而MASQUERADE将包的源地址转换成host的地址发送出去，即做一次网络地址转发。</p><h4 id="2-外网访问容器"><a href="#2-外网访问容器" class="headerlink" title="2.外网访问容器"></a>2.外网访问容器</h4><p>docker 可将容器对外提供服务的端口映射到 host 的某个端口，外网通过该端口访问容器。容器启动时通过-p参数映射端口：</p><pre><code># docker run -d -p 80 httpd</code></pre><p>容器启动后，可通过 docker ps 或者 docker port 查看到 host 映射的端口。在上面的例子中，httpd 容器的 80 端口被映射到 host 32773 上，这样就可以通过 <host ip="">:<32773> 访问容器的 web 服务了。<br>除了映射动态端口，也可在-p 中指定映射到 host 某个特定端口，例如可将 80 端口映射到 host 的 8080 端口：<br>docker run -d -p 8080:80 httpd</32773></host></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、docker单机环境的下的网络&quot;&gt;&lt;a href=&quot;#一、docker单机环境的下的网络&quot; class=&quot;headerlink&quot; title=&quot;一、docker单机环境的下的网络&quot;&gt;&lt;/a&gt;一、docker单机环境的下的网络&lt;/h2&gt;&lt;h3 id=&quot;1-三种原
      
    
    </summary>
    
      <category term="技术" scheme="http://www.chengshaojin.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://www.chengshaojin.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记（二）</title>
    <link href="http://www.chengshaojin.com/2018/01/20/docker%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.chengshaojin.com/2018/01/20/docker基础（二）/</id>
    <published>2018-01-20T07:48:57.000Z</published>
    <updated>2018-01-20T09:38:34.500Z</updated>
    
    <content type="html"><![CDATA[<p>docker底层最重要的两种技术分别是cgroup和namespace,cgroup实现资源限额，namespace实现资源隔离。cgroup可以设置进程使用cpu、内存和io资源的限额，而namespace使得每个容器都觉得自己在独立的使用主机资源，所以实现了容器间资源的隔离。linux的六种namespace对应六种资源：mount、UTS、IPC、PID、Network和User。<br>    而cgroup对资源限额的使用主要体现在以下方面</p><h4 id="1-对内存的限额。"><a href="#1-对内存的限额。" class="headerlink" title="1.对内存的限额。"></a>1.对内存的限额。</h4><p>与操作系统类似，容器使用的内存包括物理内存和swap两种。<br>  -m 或 –memory   设置内存的使用限额<br>  –memory-swap    设置内存+swap的使用限额<br>    如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># docker run -m 200M --memory-swap=300M centos</span></span><br><span class="line">表示运行centos容器，允许该容器使用内存最多200M，swap最多100M。</span><br><span class="line">默认情况这两组参数为-1，即不限额。如果启动容器的时候只指定 -m 而不指定 --memory-swap，那么默认 --memory-swap为-m的两倍，</span><br></pre></td></tr></table></figure></p><h4 id="2-对cpu的限额"><a href="#2-对cpu的限额" class="headerlink" title="2.对cpu的限额"></a>2.对cpu的限额</h4><p>默认情况，所有容器平等使用host的cpu资源没有限制。<br>-c 或 –cpu-share 可以设置容器使用cpu的权重。不指定的话默认值为1024,也就是说 -c 参数并不能为容器设置cpu的绝对使用资源<br>某个容器最终获取到的cpu资源由它占所有容器使用cpu综合的比例决定，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动两个容器：</span><br><span class="line">   <span class="comment"># docker run --name "container1" -c 1024 centos</span></span><br><span class="line">       <span class="comment"># docker run --name "container2" -c 512 centos</span></span><br><span class="line">表明 container1容器可以得到2倍的container2容器的cpu资源。这只是在cpu资源紧张的时候，如果container1是关闭状态，</span><br><span class="line">container2依然可以使用全部的cpu资源</span><br></pre></td></tr></table></figure></p><p>–cpu 可以设置cpu工作线程的数量，最大为host物理cpu个数。<br>可以使用 progrium/stress 镜像来学习如何为容器分配内存和cpu。该镜像也可用于对容器执行压力测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run --name container1 -it -c 1024 progrium/stress --cpu 1</span></span><br></pre></td></tr></table></figure></p><h4 id="3-对block-IO的限额"><a href="#3-对block-IO的限额" class="headerlink" title="3.对block IO的限额"></a>3.对block IO的限额</h4><p>Block IO 指的是磁盘的读写，docker 可通过设置权重、限制 bps 和 iops 的方式控制容器读写磁盘的带宽。<br>默认情况下，所有容器能平等地读写磁盘，可以通过设置 –blkio-weight 参数来改变容器 block IO 的优先级。–blkio-weight<br>与 –cpu-shares 类似，设置的是相对权重值，默认为 500。<br>限制 bps 和 iops：<br>    bps 是 byte per second，每秒读写的数据量。<br>    iops 是 io per second，每秒 IO 的次数。<br>    可通过以下参数控制容器的 bps 和 iops：<br>        –device-read-bps，限制读某个设备的 bps。<br>        –device-write-bps，限制写某个设备的 bps。<br>        –device-read-iops，限制读某个设备的 iops。<br>        –device-write-iops，限制写某个设备的 iops。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -it--device-write-bps /dev/sda:30MB centos</span></span><br><span class="line">   表明限制容器写 /dev/sda 的速率为 30 MB/s，可以通过dd测试。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;docker底层最重要的两种技术分别是cgroup和namespace,cgroup实现资源限额，namespace实现资源隔离。cgroup可以设置进程使用cpu、内存和io资源的限额，而namespace使得每个容器都觉得自己在独立的使用主机资源，所以实现了容器间资源的
      
    
    </summary>
    
      <category term="技术" scheme="http://www.chengshaojin.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://www.chengshaojin.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记(一)</title>
    <link href="http://www.chengshaojin.com/2018/01/19/docker%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>http://www.chengshaojin.com/2018/01/19/docker基础(一)/</id>
    <published>2018-01-19T07:41:42.000Z</published>
    <updated>2018-01-22T06:14:07.756Z</updated>
    
    <content type="html"><![CDATA[<p>最近几个月乱七八糟的学习了很多docker的东西，零散繁杂，不经常用就会遗忘很多。加之，pass层的火热，kubernetes在容器编排方面看似已经无人能敌了，所以整理以下，作为技术储备，哈哈。</p><h3 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h3><p>安装基础包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install epel-release -y</span></span><br><span class="line"><span class="comment"># yum install axel vim git curl wget lrzsz gcc  python-devel yum* python-pip</span></span><br></pre></td></tr></table></figure></p><p>设置docker官方repo，安装docker CE版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></p><p>系统默认应该没有yum-config-manager,如果没有那就安装它 : yum -y install yum-utils<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y docker-ce</span></span><br><span class="line">   <span class="comment"># docker --version</span></span><br></pre></td></tr></table></figure></p><p>配置docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mkdir /etc/systemd/system/docker.service.d</span></span><br><span class="line"><span class="comment"># tee /etc/systemd/system/docker.service.d/docker.conf &lt;&lt; 'EOF'</span></span><br><span class="line">[Service]</span><br><span class="line">MountFlags=shared</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>编辑 /usr/lib/systemd/system/docker.service<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ExecStart=/usr/bin/dockerd</span></span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry 192.168.19.133:4000</span><br></pre></td></tr></table></figure></p><p>启动docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br><span class="line"><span class="comment"># systemctl enable docker</span></span><br><span class="line"><span class="comment"># docker info</span></span><br></pre></td></tr></table></figure></p><p>搭建私有仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 \</span></span><br><span class="line">--restart=always --name registry registry:2</span><br></pre></td></tr></table></figure></p><h3 id="docker容器的几点特别的地方"><a href="#docker容器的几点特别的地方" class="headerlink" title="docker容器的几点特别的地方"></a>docker容器的几点特别的地方</h3><p>我们都知道docker容器是轻量级的，那么体现在哪些地方呢？<br>1.docker容器与host共用kernel,也就是说docker容器里是没有kernel空间的，只有rootfs，也就是我们常见的/dev、/usr、/bin这类东西，所以容器里是不能升级kernel的。<br>2.镜像的分层结构。绝大部分的docker镜像都是从base镜像中配置安装所需软件而来的，每配置安装一个软件，就在现有的镜像基础上增加一层，新镜像就是从base镜像一层一层叠加而来,而且每一层都是共享的，这样内存中只需存一份base镜像就可以了。当用某个镜像启动一个容器的时候，就会在镜像层之上生成一个容器层，所有对容器的操作都是在容器层，而不会对镜像层有任何改变。所以，镜像可以被多个容器共享。</p><h3 id="容器的一些常用操作"><a href="#容器的一些常用操作" class="headerlink" title="容器的一些常用操作"></a>容器的一些常用操作</h3><p>运行容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -it 镜像 /bin/bash            以交互模式启动并进入一个容器</span></span><br><span class="line">   参数：</span><br><span class="line">   -d  以后台方式启动容器</span><br><span class="line">   --name 给启动的容器命名</span><br></pre></td></tr></table></figure></p><p>进入容器的两种方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker attach 长id</span></span><br><span class="line"><span class="comment"># docker exec -it 容器名/长id/短id bash</span></span><br></pre></td></tr></table></figure></p><p>attach 与 exec 主要区别如下:<br>    1.attach 直接进入容器 启动命令 的终端，不会启动新的进程。<br>    2.exec 则是在容器中打开新的终端，并且可以启动新的进程。<br>    如果想直接在终端中查看启动命令的输出，用 attach；其他情况使用 exec。当然，如果只是为了查看启动命令的输出，可以用 docker logs 命令</p><p>容器的常用操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker stop/start/restart 容器</span></span><br><span class="line">   <span class="comment"># docker pause/unpause 容器</span></span><br><span class="line">   <span class="comment"># docker rm 容器</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近几个月乱七八糟的学习了很多docker的东西，零散繁杂，不经常用就会遗忘很多。加之，pass层的火热，kubernetes在容器编排方面看似已经无人能敌了，所以整理以下，作为技术储备，哈哈。&lt;/p&gt;
&lt;h3 id=&quot;安装docker-ce&quot;&gt;&lt;a href=&quot;#安装do
      
    
    </summary>
    
      <category term="技术" scheme="http://www.chengshaojin.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://www.chengshaojin.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>kolla部署openstack的pika版</title>
    <link href="http://www.chengshaojin.com/2018/01/18/kolla%E9%83%A8%E7%BD%B2openstack%E7%9A%84pika%E7%89%88/"/>
    <id>http://www.chengshaojin.com/2018/01/18/kolla部署openstack的pika版/</id>
    <published>2018-01-18T08:44:28.000Z</published>
    <updated>2018-01-18T09:33:22.162Z</updated>
    
    <content type="html"><![CDATA[<p>用kolla部署openstack真的是超级方便简单，想当年初识openstack的时候我可是用了两周多的时间才搭建起一套没有HA的环境，可今天下午，如果不算下载docker镜像的时间，我只用不到两小时的时间就部署起一套openstack+ceph的高可用融合型环境。kolla本身将openstack包括ceph的所用服务都容器化，所有你要启动某个服务，只需要重启该服务的容器就好了。而且kolla是唯一一个没有任何厂商背景的部署工具，完全开源，已经非常成熟了，我所在公司九州云，已经部署了n多的生产案例了，扩容按理来说应该也是比较方便的。<br>贴上同事整理的部署文档，你只需要仔细一点，按照此方法应该都是可以部署成功的，所以就不多说了。<br><a href="https://www.lijiawang.org/posts/kolla-pike-on-centos.html" target="_blank" rel="noopener">https://www.lijiawang.org/posts/kolla-pike-on-centos.html</a></p><h5 id="关于网络"><a href="#关于网络" class="headerlink" title="关于网络"></a>关于网络</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kolla定义网络是在/etc/kolla/global.yml文件中,只需在相关网络的后面写上实际的物理网卡名字就可以了，如下：</span><br><span class="line">network_interface: <span class="string">"eno16777736"</span>   管理网</span><br><span class="line">api_interface: <span class="string">"&#123;&#123; network_interface &#125;&#125;"</span></span><br><span class="line">storage_interface: <span class="string">"&#123;&#123; network_interface &#125;&#125;"</span>   存储网</span><br><span class="line">cluster_interface: <span class="string">"&#123;&#123; network_interface &#125;&#125;"</span>   存储集群网</span><br><span class="line">tunnel_interface: <span class="string">"&#123;&#123; network_interface &#125;&#125;"</span>    </span><br><span class="line">dns_interface: <span class="string">"&#123;&#123; network_interface &#125;&#125;"</span>       vxlan网</span><br><span class="line">neutron_external_interface: <span class="string">"eno33554960"</span>      private网</span><br><span class="line">网络可以分离，也可以用同一块，但是最少应该两块网卡，因为private网络需要独立。如果你做了网卡绑定的话，就换成bond0或bond1等</span><br></pre></td></tr></table></figure><h5 id="关于节点信息"><a href="#关于节点信息" class="headerlink" title="关于节点信息"></a>关于节点信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">关于节点的定义信息是在multinode文件中，在此文件中你可以用hostname来定义哪些物理机是control,哪些是compute，哪些是storage，</span><br><span class="line">哪些是network等等，你可以定义openstack的服务安装在哪些节点上。如下：</span><br><span class="line">[control]</span><br><span class="line">control01</span><br><span class="line">control02</span><br><span class="line">control03</span><br><span class="line">表示control01、control02、control03是控制节点，control01、control02、control03是三个节点的hostname。</span><br><span class="line">[keystone:children]</span><br><span class="line">control</span><br><span class="line">表示keystone服务安装在所有的control节点</span><br></pre></td></tr></table></figure><h5 id="关于要安装哪些组件"><a href="#关于要安装哪些组件" class="headerlink" title="关于要安装哪些组件"></a>关于要安装哪些组件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">这个功能也在global.yml文件中定义，如下：</span><br><span class="line">enable_barbican: <span class="string">"no"</span></span><br><span class="line">enable_ceilometer: <span class="string">"yes"</span></span><br><span class="line">enable_central_logging: <span class="string">"yes"</span></span><br><span class="line">enable_ceph: <span class="string">"yes"</span></span><br><span class="line">enable_ceph_rgw: <span class="string">"yes"</span></span><br><span class="line">enable_chrony: <span class="string">"yes"</span></span><br><span class="line">enable_cinder: <span class="string">"yes"</span></span><br><span class="line">enable_cinder_backend_hnas_iscsi: <span class="string">"no"</span></span><br><span class="line">enable_cinder_backend_hnas_nfs: <span class="string">"no"</span></span><br><span class="line">enable_cinder_backend_iscsi: <span class="string">"no"</span></span><br><span class="line">enable_cinder_backend_lvm: <span class="string">"no"</span></span><br><span class="line">enable_cinder_backend_nfs: <span class="string">"no"</span></span><br><span class="line">如果你想安装哪个组件，只需要将该组件行的注释去掉，冒号里写yes即可</span><br></pre></td></tr></table></figure><p>当这些都定义完就可以deploy了，你可以在deploy之前先prechecks下，防止一些语法错误。<br>再多说一点，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在你已经部署完成的情况下，如果要更改global.yml文件，改完以后执行以下命令：</span><br><span class="line">kolla-ansible upgrade -i multinode</span><br><span class="line">kolla-ansible post-deploy -i multinode</span><br><span class="line">如果修改了/etc/config/[server]/[server].conf文件：</span><br><span class="line">kolla-ansible reconfigure -i multinode</span><br><span class="line">如果部署失败，可以清除然后重新部署，清除的命令是：</span><br><span class="line">kolla-ansible destroy -i multinode --yes-i-really-really-mean-it</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用kolla部署openstack真的是超级方便简单，想当年初识openstack的时候我可是用了两周多的时间才搭建起一套没有HA的环境，可今天下午，如果不算下载docker镜像的时间，我只用不到两小时的时间就部署起一套openstack+ceph的高可用融合型环境。kol
      
    
    </summary>
    
      <category term="技术" scheme="http://www.chengshaojin.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="openstack" scheme="http://www.chengshaojin.com/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>Linux字符管理命令</title>
    <link href="http://www.chengshaojin.com/2018/01/09/Linux%E5%AD%97%E7%AC%A6%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.chengshaojin.com/2018/01/09/Linux字符管理命令/</id>
    <published>2018-01-09T04:23:18.000Z</published>
    <updated>2018-01-13T12:48:43.335Z</updated>
    
    <content type="html"><![CDATA[<p>平时工作中经常用到grep、awk、sort、sed等字符管理命令，但是自己记性又不好，每次需要去google，索性总结一下，方便以后查询。</p><h2 id="cut-截取所需字符"><a href="#cut-截取所需字符" class="headerlink" title="cut 截取所需字符"></a>cut 截取所需字符</h2><p>-d “n”:定义分界符,即点位<br>-f n:取第几位的字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如：以空格符为分界符,进行第2位截取 </span><br><span class="line">　　　cut -d <span class="string">" "</span> -f 2 /etc/fstab</span><br><span class="line">　　　　以冒号为分界符，进行第1，3位截取</span><br><span class="line">　　　cut -d <span class="string">":"</span> -f 1,3 /etc/passwd</span><br></pre></td></tr></table></figure></p><h2 id="sed-通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作"><a href="#sed-通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作" class="headerlink" title="sed 通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作"></a>sed 通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作</h2><p>1.关于替换：<br>　　1).sed替换的基本语法为: sed ‘s/原字符串/替换字符串/‘ filename<br>　　s 表示替换 特殊字符需要使用反斜线“\”进行转义，单引号是不能用反斜线转义，要用反斜线的话使用双引号。<br>　　要处理的字符串包含单引号也用双引号。<br>　　注意：在末尾加g替换每一个匹配的关键字，否则只替换每一行的第一个字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">替换所有匹配关键字</span><br><span class="line">　　　sed <span class="string">'s/原字符串/替换字符串/g'</span> filename</span><br></pre></td></tr></table></figure></p><p>　　2）三根斜线也可换成别的符号，只要紧跟s定义即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将分隔符换成问号”?”:</span><br><span class="line">　　　　sed <span class="string">'s?原字符串?替换字符串?'</span></span><br></pre></td></tr></table></figure></p><p>　　注意：sed处理过的输出是直接输出到屏幕上的,使用参数”i”直接在文件中替换<br>　　3）多个替换可以在同一条命令中执行,用分号”;”分隔，其格式为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同时执行两个替换规则</span><br><span class="line">　　　　　sed <span class="string">'s/^/添加的头部&amp;/g；s/$/&amp;添加的尾部/g'</span></span><br></pre></td></tr></table></figure></p><p>　　4）一些特殊字符的使用<br>　　　　”^”表示行首<br>　　 ”$”符号如果在引号中表示行尾，但是在引号外却表示末行(最后一行)<br>2.关于删除：<br>　　1）d 删除指定行,要在文件内删除，同样加参数i<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除文件的第1-3行 </span><br><span class="line">　　　　sed <span class="string">'1,3d'</span> filename</span><br><span class="line">　　删除文件的第3行到最后一行</span><br><span class="line">　　　　sed ‘3,<span class="variable">$d</span>’ filename</span><br><span class="line">　　删除含有指定字段的行</span><br><span class="line">　　　　sed <span class="string">'/字符/d'</span> filename</span><br></pre></td></tr></table></figure></p><p>   3)多点编辑<br>　　使用-e参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除第1-3行，替换某字符</span><br><span class="line">　　　　sed -e <span class="string">'1,3d'</span> -e <span class="string">'s/原字符/替换的字符/'</span> filename</span><br></pre></td></tr></table></figure></p><p>4)文件操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将含有某字段的行写入新的文件中</span><br><span class="line">　　sed -n <span class="string">'/某字段/w 新文件'</span> filename</span><br><span class="line">　　将小写改为大写</span><br><span class="line">　　sed <span class="string">'y/小写字母/大写字母/'</span> filename</span><br></pre></td></tr></table></figure></p><h2 id="awk-通过正则表达式-得到需要的行-列信息"><a href="#awk-通过正则表达式-得到需要的行-列信息" class="headerlink" title="awk 通过正则表达式,得到需要的行,列信息"></a>awk 通过正则表达式,得到需要的行,列信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　查看df -h命令的第2列</span><br><span class="line">　　　　df -h | awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line">　　查看df -h命令的第2,5列</span><br><span class="line">　　　　df -h | awk <span class="string">'&#123;print $2,$5&#125;'</span></span><br><span class="line">　　列示月份及年份(\n为换行符)</span><br><span class="line">　　　　date | awk <span class="string">'&#123;print "Year:" $6 "\nMonth:" $2&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="sort-默认以排序ASCII方式进行排序-a-z"><a href="#sort-默认以排序ASCII方式进行排序-a-z" class="headerlink" title="sort 默认以排序ASCII方式进行排序[a-z]"></a>sort 默认以排序ASCII方式进行排序[a-z]</h2><p>　　参数:<br>　　-u 去除重复的行<br>　　-r 降序排序[z-a]<br>　　-n 数值排序,默认情况10比2小,主要因为sort判断第一字符的值<br>　　-k 以文本的列进行判断<br>　　-t 设定分界符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　 对/etc/passwd文件进行升序排序</span><br><span class="line">　　　　sort /etc/passwd</span><br><span class="line">　　对/etc/passwd文件进行降序排序</span><br><span class="line">　　　　sort -r /etc/passwd</span><br><span class="line">　　对/etc/passwd第3列进行数值排序,分界符为:</span><br><span class="line">　　　　sort -n -k 3 -t : /etc/passwd</span><br></pre></td></tr></table></figure></p><h2 id="wc-统计行数、字数、字符数、文件总统计数"><a href="#wc-统计行数、字数、字符数、文件总统计数" class="headerlink" title="wc 统计行数、字数、字符数、文件总统计数"></a>wc 统计行数、字数、字符数、文件总统计数</h2><p>　　参数:<br>　　-l 统计行数<br>　　-c 统计字节数<br>　　-w 统计字数(单词数<br>　　uniq 检查文本中重复出现的行<br>　　-c 显示输出,并在文本行前加出现的次数,但如果<br>　　重复行不连续，则不认为是重复的行<br>　　-d 只显示重复的行<br>　　-u 只显示不重复的行<br>　　-f n前N个字段和每个字段前的空白行一起被忽略,字段从0开始编号<br>　　-s n 前N个字符被忽略,字符从0开始编号<br>　　-w n 对N个字符以后的字符不在检查重复性</p><h2 id="tee-读取标准输入的数据，并将其内容输出成文件"><a href="#tee-读取标准输入的数据，并将其内容输出成文件" class="headerlink" title="tee 读取标准输入的数据，并将其内容输出成文件"></a>tee 读取标准输入的数据，并将其内容输出成文件</h2><p>　　说明:指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件<br>　　参数:<br>　　-a:附加到既有文件的后面，而非覆盖它．<br>　　-i:忽略中断信号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　 查询当前账户并写入who.txt文件中</span><br><span class="line">who | tee who.txt</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平时工作中经常用到grep、awk、sort、sed等字符管理命令，但是自己记性又不好，每次需要去google，索性总结一下，方便以后查询。&lt;/p&gt;
&lt;h2 id=&quot;cut-截取所需字符&quot;&gt;&lt;a href=&quot;#cut-截取所需字符&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="技术" scheme="http://www.chengshaojin.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://www.chengshaojin.com/tags/Linux/"/>
    
  </entry>
  
</feed>

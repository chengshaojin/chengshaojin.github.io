<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaojin&#39;s Words</title>
  
  <subtitle>如果有一天有人问你，你觉得我这个人怎么样，你能略加思考的说他是一个有趣的人，那么我就会很开心!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-19T09:08:09.108Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>程少进</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker学习笔记(一)</title>
    <link href="http://yoursite.com/2018/01/19/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://yoursite.com/2018/01/19/docker学习笔记(一)/</id>
    <published>2018-01-19T07:41:42.000Z</published>
    <updated>2018-01-19T09:08:09.108Z</updated>
    
    <content type="html"><![CDATA[<p>最近几个月乱七八糟的学习了很多docker的东西，零散繁杂，不经常用就会遗忘很多。加之，pass层的火热，kubertnets看似已经无人能敌了，<br>所以整理以下，作为技术储备，哈哈。</p><h3 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装docker-ce</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">安装基础包</span><br><span class="line"><span class="comment"># yum install epel-release -y</span></span><br><span class="line">    <span class="comment"># yum install axel vim git curl wget lrzsz gcc  python-devel yum* python-pip</span></span><br><span class="line">设置docker官方repo，安装docker CE版本</span><br><span class="line"><span class="comment"># yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line">系统默认应该没有yum-config-manager,如果没有那就安装它 : yum -y install yum-utils</span><br><span class="line"><span class="comment"># yum install -y docker-ce</span></span><br><span class="line">    <span class="comment"># docker --version</span></span><br><span class="line">配置docker</span><br><span class="line"><span class="comment"># mkdir /etc/systemd/system/docker.service.d</span></span><br><span class="line"><span class="comment"># tee /etc/systemd/system/docker.service.d/docker.conf &lt;&lt; 'EOF'</span></span><br><span class="line">[Service]</span><br><span class="line">MountFlags=shared</span><br><span class="line">EOF</span><br><span class="line">编辑 /usr/lib/systemd/system/docker.service</span><br><span class="line"><span class="comment"># ExecStart=/usr/bin/dockerd</span></span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry 192.168.19.133:4000</span><br><span class="line">启动docker</span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br><span class="line"><span class="comment"># systemctl enable docker</span></span><br><span class="line"><span class="comment"># docker info</span></span><br><span class="line">搭建私有仓库</span><br><span class="line"><span class="comment"># docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 \</span></span><br><span class="line">--restart=always --name registry registry:2</span><br></pre></td></tr></table></figure><h3 id="docker容器的几点特别的地方"><a href="#docker容器的几点特别的地方" class="headerlink" title="docker容器的几点特别的地方"></a>docker容器的几点特别的地方</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们都知道docker容器是轻量级的，那么体现在哪些地方呢？</span><br><span class="line">1.docker容器与host共用kernel,也就是说docker容器里是没有kernel空间的，只有rootfs，也就是我们常见的/dev、/usr、/bin</span><br><span class="line">这类东西，所以容器里是不能升级kernel的。</span><br><span class="line">2.镜像的分层结构。绝大部分的docker镜像都是从base镜像中配置安装所需软件而来的，每配置安装一个软件，就在现有的镜像基础上</span><br><span class="line">增加一层，新镜像就是从base镜像一层一层叠加而来,而且每一层都是共享的，这样内存中只需存一份base镜像就可以了。当用某个镜像启动一个容</span><br><span class="line">器的时候，就会在镜像层之上生成一个容器层，所有对容器的操作都是在容器层，而不会对镜像层有任何改变。所以，镜像可以被多个容器共享。</span><br></pre></td></tr></table></figure><h3 id="容器的一些常用操作"><a href="#容器的一些常用操作" class="headerlink" title="容器的一些常用操作"></a>容器的一些常用操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.运行容器</span><br><span class="line"><span class="comment"># docker run -it 镜像 /bin/bash            以交互模式启动并进入一个容器</span></span><br><span class="line">    参数：</span><br><span class="line">    -d  以后台方式启动容器</span><br><span class="line">    --name 给启动的容器命名</span><br><span class="line">2.进入容器的两种方法</span><br><span class="line"><span class="comment"># docker attach 长id</span></span><br><span class="line">    <span class="comment"># docker exec -it 容器名/长id/短id bash</span></span><br><span class="line">    attach 与 <span class="built_in">exec</span> 主要区别如下:</span><br><span class="line">attach 直接进入容器 启动命令 的终端，不会启动新的进程。</span><br><span class="line"><span class="built_in">exec</span> 则是在容器中打开新的终端，并且可以启动新的进程。</span><br><span class="line">如果想直接在终端中查看启动命令的输出，用 attach；其他情况使用 <span class="built_in">exec</span>。当然，如果只是为了查看启动命令的输出，可以使</span><br><span class="line">用 docker logs 命令</span><br><span class="line">3.容器的常用操作</span><br><span class="line"><span class="comment"># docker stop/start/restart 容器</span></span><br><span class="line">    <span class="comment"># docker pause/unpause 容器</span></span><br><span class="line">    <span class="comment"># docker rm 容器</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近几个月乱七八糟的学习了很多docker的东西，零散繁杂，不经常用就会遗忘很多。加之，pass层的火热，kubertnets看似已经无人能敌了，&lt;br&gt;所以整理以下，作为技术储备，哈哈。&lt;/p&gt;
&lt;h3 id=&quot;安装docker-ce&quot;&gt;&lt;a href=&quot;#安装docke
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>kolla部署openstack的pika版</title>
    <link href="http://yoursite.com/2018/01/18/kolla%E9%83%A8%E7%BD%B2openstack%E7%9A%84pika%E7%89%88/"/>
    <id>http://yoursite.com/2018/01/18/kolla部署openstack的pika版/</id>
    <published>2018-01-18T08:44:28.000Z</published>
    <updated>2018-01-18T09:33:22.162Z</updated>
    
    <content type="html"><![CDATA[<p>用kolla部署openstack真的是超级方便简单，想当年初识openstack的时候我可是用了两周多的时间才搭建起一套没有HA的环境，可今天下午，如果不算下载docker镜像的时间，我只用不到两小时的时间就部署起一套openstack+ceph的高可用融合型环境。kolla本身将openstack包括ceph的所用服务都容器化，所有你要启动某个服务，只需要重启该服务的容器就好了。而且kolla是唯一一个没有任何厂商背景的部署工具，完全开源，已经非常成熟了，我所在公司九州云，已经部署了n多的生产案例了，扩容按理来说应该也是比较方便的。<br>贴上同事整理的部署文档，你只需要仔细一点，按照此方法应该都是可以部署成功的，所以就不多说了。<br><a href="https://www.lijiawang.org/posts/kolla-pike-on-centos.html" target="_blank" rel="noopener">https://www.lijiawang.org/posts/kolla-pike-on-centos.html</a></p><h5 id="关于网络"><a href="#关于网络" class="headerlink" title="关于网络"></a>关于网络</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kolla定义网络是在/etc/kolla/global.yml文件中,只需在相关网络的后面写上实际的物理网卡名字就可以了，如下：</span><br><span class="line">network_interface: <span class="string">"eno16777736"</span>   管理网</span><br><span class="line">api_interface: <span class="string">"&#123;&#123; network_interface &#125;&#125;"</span></span><br><span class="line">storage_interface: <span class="string">"&#123;&#123; network_interface &#125;&#125;"</span>   存储网</span><br><span class="line">cluster_interface: <span class="string">"&#123;&#123; network_interface &#125;&#125;"</span>   存储集群网</span><br><span class="line">tunnel_interface: <span class="string">"&#123;&#123; network_interface &#125;&#125;"</span>    </span><br><span class="line">dns_interface: <span class="string">"&#123;&#123; network_interface &#125;&#125;"</span>       vxlan网</span><br><span class="line">neutron_external_interface: <span class="string">"eno33554960"</span>      private网</span><br><span class="line">网络可以分离，也可以用同一块，但是最少应该两块网卡，因为private网络需要独立。如果你做了网卡绑定的话，就换成bond0或bond1等</span><br></pre></td></tr></table></figure><h5 id="关于节点信息"><a href="#关于节点信息" class="headerlink" title="关于节点信息"></a>关于节点信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">关于节点的定义信息是在multinode文件中，在此文件中你可以用hostname来定义哪些物理机是control,哪些是compute，哪些是storage，</span><br><span class="line">哪些是network等等，你可以定义openstack的服务安装在哪些节点上。如下：</span><br><span class="line">[control]</span><br><span class="line">control01</span><br><span class="line">control02</span><br><span class="line">control03</span><br><span class="line">表示control01、control02、control03是控制节点，control01、control02、control03是三个节点的hostname。</span><br><span class="line">[keystone:children]</span><br><span class="line">control</span><br><span class="line">表示keystone服务安装在所有的control节点</span><br></pre></td></tr></table></figure><h5 id="关于要安装哪些组件"><a href="#关于要安装哪些组件" class="headerlink" title="关于要安装哪些组件"></a>关于要安装哪些组件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">这个功能也在global.yml文件中定义，如下：</span><br><span class="line">enable_barbican: <span class="string">"no"</span></span><br><span class="line">enable_ceilometer: <span class="string">"yes"</span></span><br><span class="line">enable_central_logging: <span class="string">"yes"</span></span><br><span class="line">enable_ceph: <span class="string">"yes"</span></span><br><span class="line">enable_ceph_rgw: <span class="string">"yes"</span></span><br><span class="line">enable_chrony: <span class="string">"yes"</span></span><br><span class="line">enable_cinder: <span class="string">"yes"</span></span><br><span class="line">enable_cinder_backend_hnas_iscsi: <span class="string">"no"</span></span><br><span class="line">enable_cinder_backend_hnas_nfs: <span class="string">"no"</span></span><br><span class="line">enable_cinder_backend_iscsi: <span class="string">"no"</span></span><br><span class="line">enable_cinder_backend_lvm: <span class="string">"no"</span></span><br><span class="line">enable_cinder_backend_nfs: <span class="string">"no"</span></span><br><span class="line">如果你想安装哪个组件，只需要将该组件行的注释去掉，冒号里写yes即可</span><br></pre></td></tr></table></figure><p>当这些都定义完就可以deploy了，你可以在deploy之前先prechecks下，防止一些语法错误。<br>再多说一点，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在你已经部署完成的情况下，如果要更改global.yml文件，改完以后执行以下命令：</span><br><span class="line">kolla-ansible upgrade -i multinode</span><br><span class="line">kolla-ansible post-deploy -i multinode</span><br><span class="line">如果修改了/etc/config/[server]/[server].conf文件：</span><br><span class="line">kolla-ansible reconfigure -i multinode</span><br><span class="line">如果部署失败，可以清除然后重新部署，清除的命令是：</span><br><span class="line">kolla-ansible destroy -i multinode --yes-i-really-really-mean-it</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用kolla部署openstack真的是超级方便简单，想当年初识openstack的时候我可是用了两周多的时间才搭建起一套没有HA的环境，可今天下午，如果不算下载docker镜像的时间，我只用不到两小时的时间就部署起一套openstack+ceph的高可用融合型环境。kol
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="openstack" scheme="http://yoursite.com/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>Linux字符管理命令</title>
    <link href="http://yoursite.com/2018/01/09/Linux%E5%AD%97%E7%AC%A6%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/01/09/Linux字符管理命令/</id>
    <published>2018-01-09T04:23:18.000Z</published>
    <updated>2018-01-13T12:48:43.335Z</updated>
    
    <content type="html"><![CDATA[<p>平时工作中经常用到grep、awk、sort、sed等字符管理命令，但是自己记性又不好，每次需要去google，索性总结一下，方便以后查询。</p><h2 id="cut-截取所需字符"><a href="#cut-截取所需字符" class="headerlink" title="cut 截取所需字符"></a>cut 截取所需字符</h2><p>-d “n”:定义分界符,即点位<br>-f n:取第几位的字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如：以空格符为分界符,进行第2位截取 </span><br><span class="line">　　　cut -d <span class="string">" "</span> -f 2 /etc/fstab</span><br><span class="line">　　　　以冒号为分界符，进行第1，3位截取</span><br><span class="line">　　　cut -d <span class="string">":"</span> -f 1,3 /etc/passwd</span><br></pre></td></tr></table></figure></p><h2 id="sed-通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作"><a href="#sed-通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作" class="headerlink" title="sed 通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作"></a>sed 通过指定的正则表达式完成指定关键字的过滤、截取、修改等操作</h2><p>1.关于替换：<br>　　1).sed替换的基本语法为: sed ‘s/原字符串/替换字符串/‘ filename<br>　　s 表示替换 特殊字符需要使用反斜线“\”进行转义，单引号是不能用反斜线转义，要用反斜线的话使用双引号。<br>　　要处理的字符串包含单引号也用双引号。<br>　　注意：在末尾加g替换每一个匹配的关键字，否则只替换每一行的第一个字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">替换所有匹配关键字</span><br><span class="line">　　　sed <span class="string">'s/原字符串/替换字符串/g'</span> filename</span><br></pre></td></tr></table></figure></p><p>　　2）三根斜线也可换成别的符号，只要紧跟s定义即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将分隔符换成问号”?”:</span><br><span class="line">　　　　sed <span class="string">'s?原字符串?替换字符串?'</span></span><br></pre></td></tr></table></figure></p><p>　　注意：sed处理过的输出是直接输出到屏幕上的,使用参数”i”直接在文件中替换<br>　　3）多个替换可以在同一条命令中执行,用分号”;”分隔，其格式为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同时执行两个替换规则</span><br><span class="line">　　　　　sed <span class="string">'s/^/添加的头部&amp;/g；s/$/&amp;添加的尾部/g'</span></span><br></pre></td></tr></table></figure></p><p>　　4）一些特殊字符的使用<br>　　　　”^”表示行首<br>　　 ”$”符号如果在引号中表示行尾，但是在引号外却表示末行(最后一行)<br>2.关于删除：<br>　　1）d 删除指定行,要在文件内删除，同样加参数i<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">删除文件的第1-3行 </span><br><span class="line">　　　　sed <span class="string">'1,3d'</span> filename</span><br><span class="line">　　删除文件的第3行到最后一行</span><br><span class="line">　　　　sed ‘3,<span class="variable">$d</span>’ filename</span><br><span class="line">　　删除含有指定字段的行</span><br><span class="line">　　　　sed <span class="string">'/字符/d'</span> filename</span><br></pre></td></tr></table></figure></p><p>   3)多点编辑<br>　　使用-e参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除第1-3行，替换某字符</span><br><span class="line">　　　　sed -e <span class="string">'1,3d'</span> -e <span class="string">'s/原字符/替换的字符/'</span> filename</span><br></pre></td></tr></table></figure></p><p>4)文件操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将含有某字段的行写入新的文件中</span><br><span class="line">　　sed -n <span class="string">'/某字段/w 新文件'</span> filename</span><br><span class="line">　　将小写改为大写</span><br><span class="line">　　sed <span class="string">'y/小写字母/大写字母/'</span> filename</span><br></pre></td></tr></table></figure></p><h2 id="awk-通过正则表达式-得到需要的行-列信息"><a href="#awk-通过正则表达式-得到需要的行-列信息" class="headerlink" title="awk 通过正则表达式,得到需要的行,列信息"></a>awk 通过正则表达式,得到需要的行,列信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　查看df -h命令的第2列</span><br><span class="line">　　　　df -h | awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line">　　查看df -h命令的第2,5列</span><br><span class="line">　　　　df -h | awk <span class="string">'&#123;print $2,$5&#125;'</span></span><br><span class="line">　　列示月份及年份(\n为换行符)</span><br><span class="line">　　　　date | awk <span class="string">'&#123;print "Year:" $6 "\nMonth:" $2&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="sort-默认以排序ASCII方式进行排序-a-z"><a href="#sort-默认以排序ASCII方式进行排序-a-z" class="headerlink" title="sort 默认以排序ASCII方式进行排序[a-z]"></a>sort 默认以排序ASCII方式进行排序[a-z]</h2><p>　　参数:<br>　　-u 去除重复的行<br>　　-r 降序排序[z-a]<br>　　-n 数值排序,默认情况10比2小,主要因为sort判断第一字符的值<br>　　-k 以文本的列进行判断<br>　　-t 设定分界符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　 对/etc/passwd文件进行升序排序</span><br><span class="line">　　　　sort /etc/passwd</span><br><span class="line">　　对/etc/passwd文件进行降序排序</span><br><span class="line">　　　　sort -r /etc/passwd</span><br><span class="line">　　对/etc/passwd第3列进行数值排序,分界符为:</span><br><span class="line">　　　　sort -n -k 3 -t : /etc/passwd</span><br></pre></td></tr></table></figure></p><h2 id="wc-统计行数、字数、字符数、文件总统计数"><a href="#wc-统计行数、字数、字符数、文件总统计数" class="headerlink" title="wc 统计行数、字数、字符数、文件总统计数"></a>wc 统计行数、字数、字符数、文件总统计数</h2><p>　　参数:<br>　　-l 统计行数<br>　　-c 统计字节数<br>　　-w 统计字数(单词数<br>　　uniq 检查文本中重复出现的行<br>　　-c 显示输出,并在文本行前加出现的次数,但如果<br>　　重复行不连续，则不认为是重复的行<br>　　-d 只显示重复的行<br>　　-u 只显示不重复的行<br>　　-f n前N个字段和每个字段前的空白行一起被忽略,字段从0开始编号<br>　　-s n 前N个字符被忽略,字符从0开始编号<br>　　-w n 对N个字符以后的字符不在检查重复性</p><h2 id="tee-读取标准输入的数据，并将其内容输出成文件"><a href="#tee-读取标准输入的数据，并将其内容输出成文件" class="headerlink" title="tee 读取标准输入的数据，并将其内容输出成文件"></a>tee 读取标准输入的数据，并将其内容输出成文件</h2><p>　　说明:指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件<br>　　参数:<br>　　-a:附加到既有文件的后面，而非覆盖它．<br>　　-i:忽略中断信号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　 查询当前账户并写入who.txt文件中</span><br><span class="line">who | tee who.txt</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平时工作中经常用到grep、awk、sort、sed等字符管理命令，但是自己记性又不好，每次需要去google，索性总结一下，方便以后查询。&lt;/p&gt;
&lt;h2 id=&quot;cut-截取所需字符&quot;&gt;&lt;a href=&quot;#cut-截取所需字符&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
